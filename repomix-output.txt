This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-18T21:54:02.197Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
app/
  admin/
    components/
      widget-editors/
        AnnouncementEditor.tsx
        PriceChartEditor.tsx
        PromotionImageEditor.tsx
      AnnouncementsManager.tsx
      ChartersManager.tsx
      DashboardStats.tsx
      FlightTabsManager.tsx
      PromotionsMagager.tsx
      ServicesManager.tsx
      TabContentEditor.tsx
      WidgetEditor.tsx
    dashboard/
      page.tsx
    login/
      page.tsx
  components/
    flight-section/
      Announcements.tsx
      FlightTabContent.tsx
      PriceChart.tsx
    FlightCard.tsx
    FlightFilters.tsx
    FlightSearch.tsx
    FlightSort.tsx
  dashboard/
    page.tsx
  login/
    page.tsx
  search/
    page.tsx
  signup/
    page.tsx
  globals.css
  layout.tsx
  page.tsx
backup-repo.git/
  hooks/
    applypatch-msg.sample
    commit-msg.sample
    fsmonitor-watchman.sample
    post-update.sample
    pre-applypatch.sample
    pre-commit.sample
    pre-merge-commit.sample
    pre-push.sample
    pre-rebase.sample
    pre-receive.sample
    prepare-commit-msg.sample
    push-to-checkout.sample
    update.sample
  info/
    exclude
  config
  description
  HEAD
  packed-refs
contexts/
  AuthContext.tsx
functions/
  .eslintrc.js
  .gitignore
  .prettierrc
  index.js
  package.json
hooks/
  useAuth.ts
lib/
  config/
    xael-config.ts
  services/
    xael-service.ts
  firebaseAdmin.ts
  firebaseConfig.ts
  firestore-setup.ts
  firestore-utils.ts
  flight-service.ts
  verifyToken.js
public/
  file.svg
  globe.svg
  next.svg
  vercel.svg
  window.svg
scripts/
  init-firestore.js
  init-firestore.ts
types/
  admin.ts
  dashboard.ts
  flight.ts
.eslintrc.json
.firebaserc
.gitignore
.prettierrc
commands.txt
firebase.json
middleware.ts
next.config.ts
package.json
postcss.config.js
postcss.config.mjs
README.md
setCustomClaims.js
tailwind.config.js
tailwind.config.ts
tsconfig.json

================================================================
Repository Files
================================================================

================
File: app/admin/components/widget-editors/AnnouncementEditor.tsx
================
// app/admin/components/widget-editors/AnnouncementEditor.tsx
'use client'

import { Widget } from '@/types/dashboard'

interface AnnouncementEditorProps {
  widget: Widget
  onChange: (widget: Widget) => void
}

export default function AnnouncementEditor({
  widget,
  onChange,
}: AnnouncementEditorProps) {
  return (
    <div className="space-y-4">
      <div>
        <label className="block text-sm font-medium text-gray-700">
          Announcement Type
        </label>
        <select
          value={widget.content.type || 'info'}
          onChange={(e) =>
            onChange({
              ...widget,
              content: { ...widget.content, type: e.target.value },
            })
          }
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
        >
          <option value="info">Information</option>
          <option value="warning">Warning</option>
          <option value="alert">Alert</option>
        </select>
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700">
          Content
        </label>
        <textarea
          value={widget.content.text || ''}
          onChange={(e) =>
            onChange({
              ...widget,
              content: { ...widget.content, text: e.target.value },
            })
          }
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
          rows={4}
          placeholder="Enter announcement text..."
        />
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700">
          Priority
        </label>
        <select
          value={widget.content.priority || 'normal'}
          onChange={(e) =>
            onChange({
              ...widget,
              content: { ...widget.content, priority: e.target.value },
            })
          }
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
        >
          <option value="low">Low</option>
          <option value="normal">Normal</option>
          <option value="high">High</option>
        </select>
      </div>

      <div className="grid grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-700">
            Display From
          </label>
          <input
            type="datetime-local"
            value={widget.content.displayFrom || ''}
            onChange={(e) =>
              onChange({
                ...widget,
                content: { ...widget.content, displayFrom: e.target.value },
              })
            }
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700">
            Display Until
          </label>
          <input
            type="datetime-local"
            value={widget.content.displayUntil || ''}
            onChange={(e) =>
              onChange({
                ...widget,
                content: { ...widget.content, displayUntil: e.target.value },
              })
            }
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
          />
        </div>
      </div>

      <div className="space-y-4">
        <label className="block text-sm font-medium text-gray-700">
          Display Settings
        </label>
        <div className="space-y-2">
          <div className="flex items-center">
            <input
              type="checkbox"
              checked={widget.settings?.dismissible || false}
              onChange={(e) =>
                onChange({
                  ...widget,
                  settings: {
                    ...widget.settings,
                    dismissible: e.target.checked,
                  },
                })
              }
              className="h-4 w-4 text-blue-600 rounded border-gray-300"
            />
            <label className="ml-2 text-sm text-gray-700">
              Allow users to dismiss this announcement
            </label>
          </div>

          <div className="flex items-center">
            <input
              type="checkbox"
              checked={widget.settings?.showIcon || false}
              onChange={(e) =>
                onChange({
                  ...widget,
                  settings: {
                    ...widget.settings,
                    showIcon: e.target.checked,
                  },
                })
              }
              className="h-4 w-4 text-blue-600 rounded border-gray-300"
            />
            <label className="ml-2 text-sm text-gray-700">Show type icon</label>
          </div>

          <div className="flex items-center">
            <input
              type="checkbox"
              checked={widget.settings?.persistent || false}
              onChange={(e) =>
                onChange({
                  ...widget,
                  settings: {
                    ...widget.settings,
                    persistent: e.target.checked,
                  },
                })
              }
              className="h-4 w-4 text-blue-600 rounded border-gray-300"
            />
            <label className="ml-2 text-sm text-gray-700">
              Keep visible until expiration (override user dismiss)
            </label>
          </div>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700">
            Display Style
          </label>
          <select
            value={widget.settings?.style || 'banner'}
            onChange={(e) =>
              onChange({
                ...widget,
                settings: {
                  ...widget.settings,
                  style: e.target.value,
                },
              })
            }
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
          >
            <option value="banner">Full Width Banner</option>
            <option value="card">Card</option>
            <option value="toast">Toast Notification</option>
          </select>
        </div>

        {widget.settings?.style === 'toast' && (
          <div>
            <label className="block text-sm font-medium text-gray-700">
              Toast Position
            </label>
            <select
              value={widget.settings?.position || 'top-right'}
              onChange={(e) =>
                onChange({
                  ...widget,
                  settings: {
                    ...widget.settings,
                    position: e.target.value,
                  },
                })
              }
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
            >
              <option value="top-right">Top Right</option>
              <option value="top-left">Top Left</option>
              <option value="bottom-right">Bottom Right</option>
              <option value="bottom-left">Bottom Left</option>
            </select>
          </div>
        )}
      </div>
    </div>
  )
}

================
File: app/admin/components/widget-editors/PriceChartEditor.tsx
================
'use client'

import { Widget, WidgetSettings } from '@/types/dashboard'

interface PriceChartEditorProps {
  widget: Widget
  onChange: (widget: Widget) => void
}

export default function PriceChartEditor({
  widget,
  onChange,
}: PriceChartEditorProps) {
  const updateSettings = (settings: Partial<WidgetSettings>) => {
    onChange({
      ...widget,
      settings: {
        ...widget.settings,
        ...settings,
      },
    })
  }

  return (
    <div className="space-y-4">
      <div>
        <label className="block text-sm font-medium text-gray-700">
          Auto Update
        </label>
        <div className="mt-1">
          <input
            type="checkbox"
            checked={widget.settings?.autoUpdate || false}
            onChange={(e) => updateSettings({ autoUpdate: e.target.checked })}
            className="h-4 w-4 text-blue-600 rounded border-gray-300"
          />
          <span className="ml-2 text-sm text-gray-500">
            Automatically update prices from charter systems
          </span>
        </div>
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700">
          Update Interval (minutes)
        </label>
        <input
          type="number"
          value={widget.settings?.refreshInterval || 60}
          onChange={(e) =>
            updateSettings({ refreshInterval: parseInt(e.target.value) })
          }
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
          min="5"
          step="5"
        />
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700">
          Display Format
        </label>
        <select
          value={widget.settings?.layout || 'grid'}
          onChange={(e) =>
            updateSettings({
              layout: e.target.value as WidgetSettings['layout'],
            })
          }
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
        >
          <option value="grid">Grid</option>
          <option value="list">List</option>
          <option value="carousel">Carousel</option>
        </select>
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700">
          Price Sources
        </label>
        <div className="mt-2 space-y-2">
          {['XAEL', 'Cubazul', 'Invicta'].map((source) => (
            <div key={source} className="flex items-center">
              <input
                type="checkbox"
                checked={widget.settings?.sources?.[source] || false}
                onChange={(e) => {
                  const currentSources = widget.settings?.sources || {}
                  updateSettings({
                    sources: {
                      ...currentSources,
                      [source]: e.target.checked,
                    },
                  })
                }}
                className="h-4 w-4 text-blue-600 rounded border-gray-300"
              />
              <label className="ml-2 text-sm text-gray-700">{source}</label>
            </div>
          ))}
        </div>
      </div>
    </div>
  )
}

================
File: app/admin/components/widget-editors/PromotionImageEditor.tsx
================
'use client'

import { Widget } from '@/types/dashboard'

interface PromotionImageEditorProps {
  widget: Widget
  onChange: (widget: Widget) => void
}

export default function PromotionImageEditor({
  widget,
  onChange,
}: PromotionImageEditorProps) {
  return (
    <div className="space-y-4">
      <div>
        <label className="block text-sm font-medium text-gray-700">
          Promotion Type
        </label>
        <select
          value={widget.content.type || 'standard'}
          onChange={(e) =>
            onChange({
              ...widget,
              content: { ...widget.content, type: e.target.value },
            })
          }
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
        >
          <option value="standard">Standard</option>
          <option value="featured">Featured</option>
          <option value="banner">Banner</option>
        </select>
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700">
          Image URL
        </label>
        <input
          type="text"
          value={widget.content.imageUrl || ''}
          onChange={(e) =>
            onChange({
              ...widget,
              content: { ...widget.content, imageUrl: e.target.value },
            })
          }
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
          placeholder="https://example.com/image.jpg"
        />
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700">
          Link URL (Optional)
        </label>
        <input
          type="text"
          value={widget.content.linkUrl || ''}
          onChange={(e) =>
            onChange({
              ...widget,
              content: { ...widget.content, linkUrl: e.target.value },
            })
          }
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
          placeholder="https://example.com/promotion"
        />
      </div>

      <div className="grid grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-700">
            Valid From
          </label>
          <input
            type="datetime-local"
            value={widget.content.validFrom || ''}
            onChange={(e) =>
              onChange({
                ...widget,
                content: { ...widget.content, validFrom: e.target.value },
              })
            }
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700">
            Valid Until
          </label>
          <input
            type="datetime-local"
            value={widget.content.validUntil || ''}
            onChange={(e) =>
              onChange({
                ...widget,
                content: { ...widget.content, validUntil: e.target.value },
              })
            }
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
          />
        </div>
      </div>
    </div>
  )
}

================
File: app/admin/components/AnnouncementsManager.tsx
================
'use client'

import { useState } from 'react'
import { Announcement } from '@/types/dashboard'

interface AnnouncementsManagerProps {
  announcements: Announcement[]
  onUpdate: (announcements: Announcement[]) => void
}

export default function AnnouncementsManager({
  announcements,
  onUpdate,
}: AnnouncementsManagerProps) {
  const [editingAnnouncement, setEditingAnnouncement] =
    useState<Announcement | null>(null)
  const [deleteConfirm, setDeleteConfirm] = useState<string | null>(null)

  const handleSaveAnnouncement = async (announcement: Announcement) => {
    const updatedAnnouncements = editingAnnouncement
      ? announcements.map((a) => (a.id === announcement.id ? announcement : a))
      : [...announcements, announcement]
    onUpdate(updatedAnnouncements)
    setEditingAnnouncement(null)
  }

  const handleDeleteAnnouncement = (id: string) => {
    const updatedAnnouncements = announcements.filter((a) => a.id !== id)
    onUpdate(updatedAnnouncements)
    setDeleteConfirm(null)
  }

  const handleAddAnnouncement = () => {
    const newAnnouncement: Announcement = {
      id: `announcement-${Date.now()}`,
      title: 'New Announcement',
      content: '',
      priority: 'normal',
      type: 'info',
      validFrom: new Date(),
      validUntil: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 1 week from now
      active: true,
      order: announcements.length,
    }
    setEditingAnnouncement(newAnnouncement)
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-xl font-semibold">Manage Announcements</h2>
        <button
          onClick={handleAddAnnouncement}
          className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700"
        >
          Add Announcement
        </button>
      </div>

      {editingAnnouncement && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg p-6 max-w-2xl w-full">
            <h3 className="text-lg font-semibold mb-4">
              {editingAnnouncement.id.startsWith('announcement-')
                ? 'New'
                : 'Edit'}{' '}
              Announcement
            </h3>
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700">
                  Title
                </label>
                <input
                  type="text"
                  value={editingAnnouncement.title}
                  onChange={(e) =>
                    setEditingAnnouncement({
                      ...editingAnnouncement,
                      title: e.target.value,
                    })
                  }
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700">
                  Content
                </label>
                <textarea
                  value={editingAnnouncement.content}
                  onChange={(e) =>
                    setEditingAnnouncement({
                      ...editingAnnouncement,
                      content: e.target.value,
                    })
                  }
                  rows={4}
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                />
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700">
                    Priority
                  </label>
                  <select
                    value={editingAnnouncement.priority}
                    onChange={(e) =>
                      setEditingAnnouncement({
                        ...editingAnnouncement,
                        priority: e.target.value as 'low' | 'normal' | 'high',
                      })
                    }
                    className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                  >
                    <option value="low">Low</option>
                    <option value="normal">Normal</option>
                    <option value="high">High</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700">
                    Type
                  </label>
                  <select
                    value={editingAnnouncement.type}
                    onChange={(e) =>
                      setEditingAnnouncement({
                        ...editingAnnouncement,
                        type: e.target.value as 'info' | 'warning' | 'alert',
                      })
                    }
                    className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                  >
                    <option value="info">Info</option>
                    <option value="warning">Warning</option>
                    <option value="alert">Alert</option>
                  </select>
                </div>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700">
                    Valid From
                  </label>
                  <input
                    type="datetime-local"
                    value={editingAnnouncement.validFrom
                      .toISOString()
                      .slice(0, 16)}
                    onChange={(e) =>
                      setEditingAnnouncement({
                        ...editingAnnouncement,
                        validFrom: new Date(e.target.value),
                      })
                    }
                    className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700">
                    Valid Until
                  </label>
                  <input
                    type="datetime-local"
                    value={editingAnnouncement.validUntil
                      .toISOString()
                      .slice(0, 16)}
                    onChange={(e) =>
                      setEditingAnnouncement({
                        ...editingAnnouncement,
                        validUntil: new Date(e.target.value),
                      })
                    }
                    className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700">
                  Display Order
                </label>
                <input
                  type="number"
                  value={editingAnnouncement.order}
                  onChange={(e) =>
                    setEditingAnnouncement({
                      ...editingAnnouncement,
                      order: parseInt(e.target.value),
                    })
                  }
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                  min="0"
                />
              </div>

              <div className="flex items-center">
                <input
                  type="checkbox"
                  checked={editingAnnouncement.active}
                  onChange={(e) =>
                    setEditingAnnouncement({
                      ...editingAnnouncement,
                      active: e.target.checked,
                    })
                  }
                  className="h-4 w-4 text-blue-600 rounded border-gray-300"
                />
                <label className="ml-2 text-sm text-gray-700">Active</label>
              </div>

              <div className="flex justify-end space-x-2 mt-6">
                <button
                  onClick={() => setEditingAnnouncement(null)}
                  className="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50"
                >
                  Cancel
                </button>
                <button
                  onClick={() => handleSaveAnnouncement(editingAnnouncement)}
                  className="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700"
                >
                  Save
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Announcements List */}
      <div className="space-y-4">
        {announcements
          .sort((a, b) => a.order - b.order)
          .map((announcement) => (
            <div
              key={announcement.id}
              className={`border rounded-lg p-4 ${
                announcement.type === 'alert'
                  ? 'border-red-200 bg-red-50'
                  : announcement.type === 'warning'
                    ? 'border-yellow-200 bg-yellow-50'
                    : 'border-blue-200 bg-blue-50'
              }`}
            >
              <div className="flex justify-between items-start">
                <div className="flex-1">
                  <h3 className="font-semibold flex items-center">
                    {announcement.title}
                    <span
                      className={`ml-2 text-xs px-2 py-1 rounded-full ${
                        announcement.priority === 'high'
                          ? 'bg-red-100 text-red-800'
                          : announcement.priority === 'normal'
                            ? 'bg-yellow-100 text-yellow-800'
                            : 'bg-green-100 text-green-800'
                      }`}
                    >
                      {announcement.priority}
                    </span>
                  </h3>
                  <p className="mt-2 text-gray-600">{announcement.content}</p>
                  <div className="mt-2 text-sm text-gray-500">
                    <span>Order: {announcement.order}</span>
                    <span className="mx-2">•</span>
                    <span>
                      {announcement.validFrom.toLocaleDateString()} -{' '}
                      {announcement.validUntil.toLocaleDateString()}
                    </span>
                    <span className="mx-2">•</span>
                    <span
                      className={
                        announcement.active ? 'text-green-600' : 'text-red-600'
                      }
                    >
                      {announcement.active ? 'Active' : 'Inactive'}
                    </span>
                  </div>
                </div>

                <div className="flex space-x-2 ml-4">
                  <button
                    onClick={() => setEditingAnnouncement(announcement)}
                    className="p-2 text-blue-600 hover:bg-blue-100 rounded"
                  >
                    Edit
                  </button>
                  {deleteConfirm === announcement.id ? (
                    <>
                      <button
                        onClick={() =>
                          handleDeleteAnnouncement(announcement.id)
                        }
                        className="p-2 text-red-600 hover:bg-red-100 rounded"
                      >
                        Confirm
                      </button>
                      <button
                        onClick={() => setDeleteConfirm(null)}
                        className="p-2 text-gray-600 hover:bg-gray-100 rounded"
                      >
                        Cancel
                      </button>
                    </>
                  ) : (
                    <button
                      onClick={() => setDeleteConfirm(announcement.id)}
                      className="p-2 text-red-600 hover:bg-red-100 rounded"
                    >
                      Delete
                    </button>
                  )}
                </div>
              </div>
            </div>
          ))}
      </div>
    </div>
  )
}

================
File: app/admin/components/ChartersManager.tsx
================
// app/admin/components/ChartersManager.tsx
'use client'

import { useState } from 'react'
import { db } from '@/lib/firebaseConfig'
import { collection, doc, setDoc } from 'firebase/firestore'
import { Charter, Flight } from '@/types/flight'

interface ChartersManagerProps {
  charters: Charter[]
  onUpdate: (charters: Charter[]) => void
}

export default function ChartersManager({
  charters,
  onUpdate,
}: ChartersManagerProps) {
  const [editingCharter, setEditingCharter] = useState<Charter | null>(null)
  const [newFlight, setNewFlight] = useState<Flight>({ route: '', price: '' })

  const handleSaveCharter = async (charter: Charter) => {
    try {
      // Update in Firestore
      const charterRef = doc(db, 'charters', charter.id)
      await setDoc(charterRef, charter, { merge: true })

      // Update local state
      const updatedCharters = charters.map((c) =>
        c.id === charter.id ? charter : c
      )
      onUpdate(updatedCharters)
      setEditingCharter(null)
    } catch (error) {
      console.error('Error saving charter:', error)
    }
  }

  const handleAddFlight = (charter: Charter) => {
    if (newFlight.route && newFlight.price) {
      const updatedCharter = {
        ...charter,
        flights: [...charter.flights, newFlight],
      }
      handleSaveCharter(updatedCharter)
      setNewFlight({ route: '', price: '' })
    }
  }

  return (
    <div className="space-y-8">
      {charters.map((charter) => (
        <div key={charter.id} className="border rounded-lg p-6">
          <div className="flex justify-between items-center mb-4">
            <h3 className="text-xl font-semibold">{charter.title}</h3>
            <button
              onClick={() => setEditingCharter(charter)}
              className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
            >
              Edit Charter
            </button>
          </div>

          {/* Flights Table */}
          <table className="w-full mb-4">
            <thead>
              <tr>
                <th className="text-left pb-2">Route</th>
                <th className="text-left pb-2">Price</th>
                <th className="text-left pb-2">Actions</th>
              </tr>
            </thead>
            <tbody>
              {charter.flights.map((flight, index) => (
                <tr key={index}>
                  <td className="py-2">{flight.route}</td>
                  <td className="py-2">{flight.price}</td>
                  <td className="py-2">
                    <button
                      onClick={() => {
                        const updatedCharter = {
                          ...charter,
                          flights: charter.flights.filter(
                            (_, i) => i !== index
                          ),
                        }
                        handleSaveCharter(updatedCharter)
                      }}
                      className="px-3 py-1 bg-red-600 text-white rounded hover:bg-red-700"
                    >
                      Remove
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>

          {/* Add New Flight */}
          <div className="flex space-x-2">
            <input
              type="text"
              placeholder="Route"
              value={newFlight.route}
              onChange={(e) =>
                setNewFlight({ ...newFlight, route: e.target.value })
              }
              className="flex-1 p-2 border rounded"
            />
            <input
              type="text"
              placeholder="Price"
              value={newFlight.price}
              onChange={(e) =>
                setNewFlight({ ...newFlight, price: e.target.value })
              }
              className="w-32 p-2 border rounded"
            />
            <button
              onClick={() => handleAddFlight(charter)}
              className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700"
            >
              Add Flight
            </button>
          </div>
        </div>
      ))}
    </div>
  )
}

================
File: app/admin/components/DashboardStats.tsx
================
'use client'

import { useState } from 'react'
import { DashboardData } from '@/types/dashboard'
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
} from 'recharts'

interface DashboardStatsProps {
  data: DashboardData | null
}

export default function DashboardStats({ data }: DashboardStatsProps) {
  const [timeframe, setTimeframe] = useState<'daily' | 'weekly' | 'monthly'>(
    'daily'
  )

  if (!data) {
    return (
      <div className="p-6">
        <div className="text-center text-gray-500">
          Loading dashboard data...
        </div>
      </div>
    )
  }

  // Calculate trends (percentage changes)
  const calculateTrend = (current: number, previous: number): number => {
    return previous ? ((current - previous) / previous) * 100 : 0
  }

  const stats = [
    {
      name: 'Total Flights',
      value: data.totalFlights,
      trend: calculateTrend(data.totalFlights, data.totalFlights - 5),
      color: 'bg-blue-500',
    },
    {
      name: 'Active Promotions',
      value: data.activePromotions,
      trend: calculateTrend(data.activePromotions, data.activePromotions - 2),
      color: 'bg-green-500',
    },
    {
      name: 'Active Announcements',
      value: data.activeAnnouncements,
      trend: calculateTrend(
        data.activeAnnouncements,
        data.activeAnnouncements - 1
      ),
      color: 'bg-purple-500',
    },
    {
      name: 'Recent Bookings',
      value: data.recentBookings,
      trend: calculateTrend(data.recentBookings, data.recentBookings - 3),
      color: 'bg-yellow-500',
    },
  ]

  // Sample chart data
  const chartData = [
    { name: 'Jan', bookings: 65, revenue: 4800, visitors: 2400 },
    { name: 'Feb', bookings: 59, revenue: 5200, visitors: 2800 },
    { name: 'Mar', bookings: 80, revenue: 6100, visitors: 3200 },
    { name: 'Apr', bookings: 81, revenue: 6400, visitors: 3600 },
    { name: 'May', bookings: 56, revenue: 5900, visitors: 3100 },
    { name: 'Jun', bookings: 55, revenue: 5700, visitors: 3000 },
  ]

  return (
    <div className="p-6 space-y-6">
      {/* Stats Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {stats.map((stat) => (
          <div
            key={stat.name}
            className="bg-white rounded-lg shadow-sm p-6 border border-gray-200"
          >
            <div className="flex items-center justify-between">
              <h3 className="text-sm font-medium text-gray-500">{stat.name}</h3>
              <div className={`w-2 h-2 rounded-full ${stat.color}`}></div>
            </div>
            <p className="mt-2 text-3xl font-semibold text-gray-900">
              {stat.value.toLocaleString()}
            </p>
            <div className="mt-2 flex items-center">
              <span
                className={`text-sm font-medium ${
                  stat.trend >= 0 ? 'text-green-600' : 'text-red-600'
                }`}
              >
                {stat.trend >= 0 ? '↑' : '↓'} {Math.abs(stat.trend).toFixed(1)}%
              </span>
              <span className="ml-2 text-sm text-gray-500">
                from previous period
              </span>
            </div>
          </div>
        ))}
      </div>

      {/* Metrics Timeframe Selector */}
      <div className="flex items-center space-x-4">
        <h2 className="text-lg font-medium text-gray-900">
          Performance Metrics
        </h2>
        <div className="flex rounded-lg shadow-sm">
          {(['daily', 'weekly', 'monthly'] as const).map((t) => (
            <button
              key={t}
              onClick={() => setTimeframe(t)}
              className={`px-4 py-2 text-sm font-medium ${
                timeframe === t
                  ? 'bg-blue-600 text-white'
                  : 'bg-white text-gray-700 hover:bg-gray-50'
              } ${
                t === 'daily'
                  ? 'rounded-l-lg'
                  : t === 'monthly'
                    ? 'rounded-r-lg'
                    : ''
              } border border-gray-200`}
            >
              {t.charAt(0).toUpperCase() + t.slice(1)}
            </button>
          ))}
        </div>
      </div>

      {/* Metrics Grid */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {Object.entries(data.metrics[timeframe]).map(([key, value]) => (
          <div
            key={key}
            className="bg-white rounded-lg shadow-sm p-6 border border-gray-200"
          >
            <h3 className="text-sm font-medium text-gray-500 capitalize">
              {key}
            </h3>
            <p className="mt-2 text-3xl font-semibold text-gray-900">
              {key === 'revenue'
                ? `$${value.toLocaleString()}`
                : value.toLocaleString()}
            </p>
          </div>
        ))}
      </div>

      {/* Charts */}
      <div className="space-y-6">
        <div className="bg-white rounded-lg shadow-sm p-6 border border-gray-200">
          <h3 className="text-lg font-medium text-gray-900 mb-6">
            Performance Overview
          </h3>
          <div className="h-[400px]">
            <ResponsiveContainer width="100%" height="100%">
              <LineChart data={chartData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="name" />
                <YAxis yAxisId="left" />
                <YAxis yAxisId="right" orientation="right" />
                <Tooltip />
                <Line
                  yAxisId="left"
                  type="monotone"
                  dataKey="bookings"
                  stroke="#3B82F6"
                  name="Bookings"
                />
                <Line
                  yAxisId="right"
                  type="monotone"
                  dataKey="revenue"
                  stroke="#10B981"
                  name="Revenue"
                />
                <Line
                  yAxisId="left"
                  type="monotone"
                  dataKey="visitors"
                  stroke="#8B5CF6"
                  name="Visitors"
                />
              </LineChart>
            </ResponsiveContainer>
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {/* Recent Activity */}
          <div className="bg-white rounded-lg shadow-sm p-6 border border-gray-200">
            <h3 className="text-lg font-medium text-gray-900 mb-4">
              Recent Activity
            </h3>
            <div className="space-y-4">
              {[
                {
                  type: 'booking',
                  message: 'New booking received',
                  time: '5 minutes ago',
                },
                {
                  type: 'promotion',
                  message: 'Summer promotion updated',
                  time: '2 hours ago',
                },
                {
                  type: 'announcement',
                  message: 'New announcement published',
                  time: '4 hours ago',
                },
              ].map((activity, index) => (
                <div
                  key={index}
                  className="flex items-center space-x-3 text-sm"
                >
                  <div
                    className={`w-2 h-2 rounded-full ${
                      activity.type === 'booking'
                        ? 'bg-green-500'
                        : activity.type === 'promotion'
                          ? 'bg-blue-500'
                          : 'bg-purple-500'
                    }`}
                  />
                  <span className="flex-1 text-gray-600">
                    {activity.message}
                  </span>
                  <span className="text-gray-400">{activity.time}</span>
                </div>
              ))}
            </div>
          </div>

          {/* Quick Actions */}
          <div className="bg-white rounded-lg shadow-sm p-6 border border-gray-200">
            <h3 className="text-lg font-medium text-gray-900 mb-4">
              Quick Actions
            </h3>
            <div className="grid grid-cols-2 gap-4">
              {[
                {
                  label: 'New Promotion',
                  color: 'bg-blue-600 hover:bg-blue-700',
                },
                {
                  label: 'Add Announcement',
                  color: 'bg-purple-600 hover:bg-purple-700',
                },
                {
                  label: 'Update Prices',
                  color: 'bg-green-600 hover:bg-green-700',
                },
                {
                  label: 'View Reports',
                  color: 'bg-yellow-600 hover:bg-yellow-700',
                },
              ].map((action) => (
                <button
                  key={action.label}
                  className={`${action.color} text-white text-sm font-medium px-4 py-2 rounded-lg transition`}
                >
                  {action.label}
                </button>
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

================
File: app/admin/components/FlightTabsManager.tsx
================
'use client'

import { useState } from 'react'
import { FlightTab } from '@/types/dashboard'
import dynamic from 'next/dynamic'

const TabContentEditor = dynamic(() => import('./TabContentEditor'), {
  ssr: false,
})

interface FlightTabsManagerProps {
  tabs: FlightTab[]
  onUpdate: (tabs: FlightTab[]) => Promise<void>
}

export default function FlightTabsManager({
  tabs,
  onUpdate,
}: FlightTabsManagerProps) {
  const [editingTab, setEditingTab] = useState<FlightTab | null>(null)
  const [isCreating, setIsCreating] = useState(false)
  const [deleteConfirm, setDeleteConfirm] = useState<string | null>(null)

  const handleCreateTab = () => {
    const newTab: FlightTab = {
      id: `tab-${Date.now()}`,
      title: 'New Tab',
      description: '',
      order: tabs.length,
      widgets: [],
      active: true,
    }
    setEditingTab(newTab)
    setIsCreating(true)
  }

  const handleSaveTab = async (tab: FlightTab) => {
    try {
      const updatedTabs = isCreating
        ? [...tabs, tab]
        : tabs.map((t) => (t.id === tab.id ? tab : t))

      await onUpdate(updatedTabs)
      setEditingTab(null)
      setIsCreating(false)
    } catch (error) {
      console.error('Error saving tab:', error)
    }
  }

  const handleDeleteTab = async (tabId: string) => {
    try {
      const updatedTabs = tabs.filter((t) => t.id !== tabId)
      // Reorder remaining tabs
      updatedTabs.forEach((tab, index) => {
        tab.order = index
      })
      await onUpdate(updatedTabs)
      setDeleteConfirm(null)
    } catch (error) {
      console.error('Error deleting tab:', error)
    }
  }

  const handleMoveTab = async (tabId: string, direction: 'up' | 'down') => {
    const currentIndex = tabs.findIndex((t) => t.id === tabId)
    if (
      (direction === 'up' && currentIndex === 0) ||
      (direction === 'down' && currentIndex === tabs.length - 1)
    ) {
      return
    }

    const updatedTabs = [...tabs]
    const newIndex = direction === 'up' ? currentIndex - 1 : currentIndex + 1
    const [movedTab] = updatedTabs.splice(currentIndex, 1)
    updatedTabs.splice(newIndex, 0, movedTab)

    // Update order property
    updatedTabs.forEach((tab, index) => {
      tab.order = index
    })

    await onUpdate(updatedTabs)
  }

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <h2 className="text-xl font-semibold text-gray-900">
          Manage Flight Section Tabs
        </h2>
        <button
          onClick={handleCreateTab}
          className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition"
        >
          Add New Tab
        </button>
      </div>

      {/* Tabs List */}
      <div className="grid gap-6">
        {tabs
          .sort((a, b) => a.order - b.order)
          .map((tab, index) => (
            <div
              key={tab.id}
              className="bg-white rounded-lg shadow-sm border border-gray-200"
            >
              <div className="p-6">
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <div className="flex items-center space-x-4">
                      <div className="flex flex-col space-y-1">
                        <button
                          onClick={() => handleMoveTab(tab.id, 'up')}
                          disabled={index === 0}
                          className="p-1 text-gray-500 hover:text-gray-700 disabled:opacity-50"
                        >
                          ↑
                        </button>
                        <button
                          onClick={() => handleMoveTab(tab.id, 'down')}
                          disabled={index === tabs.length - 1}
                          className="p-1 text-gray-500 hover:text-gray-700 disabled:opacity-50"
                        >
                          ↓
                        </button>
                      </div>
                      <div>
                        <h3 className="text-lg font-medium text-gray-900">
                          {tab.title}
                        </h3>
                        {tab.description && (
                          <p className="mt-1 text-sm text-gray-500">
                            {tab.description}
                          </p>
                        )}
                        <div className="mt-2 flex items-center space-x-2">
                          <span
                            className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                              tab.active
                                ? 'bg-green-100 text-green-800'
                                : 'bg-red-100 text-red-800'
                            }`}
                          >
                            {tab.active ? 'Active' : 'Inactive'}
                          </span>
                          <span className="text-xs text-gray-500">
                            {tab.widgets.length} widgets
                          </span>
                          <span className="text-xs text-gray-500">
                            Order: {tab.order}
                          </span>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div className="flex space-x-2 ml-4">
                    <button
                      onClick={() => setEditingTab(tab)}
                      className="px-3 py-1 bg-blue-600 text-white rounded hover:bg-blue-700 transition"
                    >
                      Edit
                    </button>
                    {deleteConfirm === tab.id ? (
                      <>
                        <button
                          onClick={() => handleDeleteTab(tab.id)}
                          className="px-3 py-1 bg-red-600 text-white rounded hover:bg-red-700 transition"
                        >
                          Confirm
                        </button>
                        <button
                          onClick={() => setDeleteConfirm(null)}
                          className="px-3 py-1 bg-gray-600 text-white rounded hover:bg-gray-700 transition"
                        >
                          Cancel
                        </button>
                      </>
                    ) : (
                      <button
                        onClick={() => setDeleteConfirm(tab.id)}
                        className="px-3 py-1 bg-red-600 text-white rounded hover:bg-red-700 transition"
                      >
                        Delete
                      </button>
                    )}
                  </div>
                </div>
              </div>
            </div>
          ))}
      </div>

      {/* Tab Editor Modal */}
      {editingTab && (
        <TabContentEditor
          tab={editingTab}
          onSave={handleSaveTab}
          onCancel={() => {
            setEditingTab(null)
            setIsCreating(false)
          }}
        />
      )}
    </div>
  )
}

================
File: app/admin/components/PromotionsMagager.tsx
================
// app/adimn / components / PromotionsManager.tsx(continued)
;('use client')

import { useState } from 'react'
import { Promotion } from '@/types/dashboard'

interface PromotionsManagerProps {
  promotions: Promotion[]
  onUpdate: (promotions: Promotion[]) => void
}

export default function PromotionsManager({
  promotions,
  onUpdate,
}: PromotionsManagerProps) {
  const [editingPromotion, setEditingPromotion] = useState<Promotion | null>(
    null
  )
  const [deleteConfirm, setDeleteConfirm] = useState<string | null>(null)

  const handleSavePromotion = async (promotion: Promotion) => {
    const updatedPromotions = promotions.map((p) =>
      p.id === promotion.id ? promotion : p
    )
    onUpdate(updatedPromotions)
    setEditingPromotion(null)
  }

  const handleDeletePromotion = (id: string) => {
    const updatedPromotions = promotions.filter((p) => p.id !== id)
    onUpdate(updatedPromotions)
    setDeleteConfirm(null)
  }

  const handleAddPromotion = () => {
    const newPromotion: Promotion = {
      id: `promo-${Date.now()}`,
      title: 'New Promotion',
      imageUrl: '',
      description: '',
      validFrom: new Date(),
      validUntil: new Date(),
      active: true,
      order: promotions.length,
      charter: '',
      type: 'standard',
    }
    onUpdate([...promotions, newPromotion])
    setEditingPromotion(newPromotion)
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-xl font-semibold">Manage Promotions</h2>
        <button
          onClick={handleAddPromotion}
          className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700"
        >
          Add Promotion
        </button>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {promotions
          .sort((a, b) => (a.order || 0) - (b.order || 0))
          .map((promotion) => (
            <div key={promotion.id} className="border rounded-lg p-4">
              {editingPromotion?.id === promotion.id ? (
                <div className="space-y-4">
                  <input
                    type="text"
                    value={editingPromotion.title}
                    onChange={(e) =>
                      setEditingPromotion({
                        ...editingPromotion,
                        title: e.target.value,
                      })
                    }
                    className="w-full p-2 border rounded"
                    placeholder="Title"
                  />
                  <input
                    type="text"
                    value={editingPromotion.imageUrl}
                    onChange={(e) =>
                      setEditingPromotion({
                        ...editingPromotion,
                        imageUrl: e.target.value,
                      })
                    }
                    className="w-full p-2 border rounded"
                    placeholder="Image URL"
                  />
                  <textarea
                    value={editingPromotion.description}
                    onChange={(e) =>
                      setEditingPromotion({
                        ...editingPromotion,
                        description: e.target.value,
                      })
                    }
                    className="w-full p-2 border rounded"
                    placeholder="Description"
                    rows={3}
                  />
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm text-gray-600">
                        Valid From
                      </label>
                      <input
                        type="date"
                        value={
                          editingPromotion.validFrom.toISOString().split('T')[0]
                        }
                        onChange={(e) =>
                          setEditingPromotion({
                            ...editingPromotion,
                            validFrom: new Date(e.target.value),
                          })
                        }
                        className="w-full p-2 border rounded"
                      />
                    </div>
                    <div>
                      <label className="block text-sm text-gray-600">
                        Valid Until
                      </label>
                      <input
                        type="date"
                        value={
                          editingPromotion.validUntil
                            .toISOString()
                            .split('T')[0]
                        }
                        onChange={(e) =>
                          setEditingPromotion({
                            ...editingPromotion,
                            validUntil: new Date(e.target.value),
                          })
                        }
                        className="w-full p-2 border rounded"
                      />
                    </div>
                  </div>
                  <div>
                    <label className="block text-sm text-gray-600">Type</label>
                    <select
                      value={editingPromotion.type}
                      onChange={(e) =>
                        setEditingPromotion({
                          ...editingPromotion,
                          type: e.target.value as
                            | 'standard'
                            | 'featured'
                            | 'banner',
                        })
                      }
                      className="w-full p-2 border rounded"
                    >
                      <option value="standard">Standard</option>
                      <option value="featured">Featured</option>
                      <option value="banner">Banner</option>
                    </select>
                  </div>
                  <div>
                    <label className="block text-sm text-gray-600">
                      Charter (Optional)
                    </label>
                    <input
                      type="text"
                      value={editingPromotion.charter}
                      onChange={(e) =>
                        setEditingPromotion({
                          ...editingPromotion,
                          charter: e.target.value,
                        })
                      }
                      className="w-full p-2 border rounded"
                      placeholder="Charter name"
                    />
                  </div>
                  <div>
                    <label className="block text-sm text-gray-600">
                      Display Order
                    </label>
                    <input
                      type="number"
                      value={editingPromotion.order || 0}
                      onChange={(e) =>
                        setEditingPromotion({
                          ...editingPromotion,
                          order: parseInt(e.target.value),
                        })
                      }
                      className="w-full p-2 border rounded"
                      min="0"
                    />
                  </div>
                  <div className="flex items-center">
                    <input
                      type="checkbox"
                      checked={editingPromotion.active}
                      onChange={(e) =>
                        setEditingPromotion({
                          ...editingPromotion,
                          active: e.target.checked,
                        })
                      }
                      className="mr-2"
                    />
                    <label className="text-sm text-gray-600">Active</label>
                  </div>
                  <div className="flex justify-end space-x-2">
                    <button
                      onClick={() => handleSavePromotion(editingPromotion)}
                      className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
                    >
                      Save
                    </button>
                    <button
                      onClick={() => setEditingPromotion(null)}
                      className="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700"
                    >
                      Cancel
                    </button>
                  </div>
                </div>
              ) : (
                <div>
                  <div className="aspect-w-16 aspect-h-9 mb-4">
                    {promotion.imageUrl ? (
                      <img
                        src={promotion.imageUrl}
                        alt={promotion.title}
                        className="object-cover rounded"
                      />
                    ) : (
                      <div className="bg-gray-200 rounded flex items-center justify-center">
                        No Image
                      </div>
                    )}
                  </div>
                  <h3 className="font-semibold">{promotion.title}</h3>
                  <p className="text-sm text-gray-600 mt-2">
                    {promotion.description}
                  </p>
                  <div className="mt-2 text-sm">
                    <span
                      className={`px-2 py-1 rounded ${
                        promotion.active
                          ? 'bg-green-100 text-green-800'
                          : 'bg-red-100 text-red-800'
                      }`}
                    >
                      {promotion.active ? 'Active' : 'Inactive'}
                    </span>
                    <span className="ml-2 text-gray-500">
                      Order: {promotion.order || 0}
                    </span>
                  </div>
                  <div className="mt-4 flex justify-end space-x-2">
                    <button
                      onClick={() => setEditingPromotion(promotion)}
                      className="px-3 py-1 bg-blue-600 text-white rounded hover:bg-blue-700"
                    >
                      Edit
                    </button>
                    {deleteConfirm === promotion.id ? (
                      <>
                        <button
                          onClick={() => handleDeletePromotion(promotion.id)}
                          className="px-3 py-1 bg-red-600 text-white rounded hover:bg-red-700"
                        >
                          Confirm
                        </button>
                        <button
                          onClick={() => setDeleteConfirm(null)}
                          className="px-3 py-1 bg-gray-600 text-white rounded hover:bg-gray-700"
                        >
                          Cancel
                        </button>
                      </>
                    ) : (
                      <button
                        onClick={() => setDeleteConfirm(promotion.id)}
                        className="px-3 py-1 bg-red-600 text-white rounded hover:bg-red-700"
                      >
                        Delete
                      </button>
                    )}
                  </div>
                </div>
              )}
            </div>
          ))}
      </div>
    </div>
  )
}

================
File: app/admin/components/ServicesManager.tsx
================
'use client'

import { useState } from 'react'
import { db } from '@/lib/firebaseConfig'
import { collection, doc, updateDoc, setDoc } from 'firebase/firestore'

interface Service {
  id: string
  title: string
  content: string
}

interface ServicesManagerProps {
  services: Service[]
  onUpdate: (services: Service[]) => void
}

export default function ServicesManager({
  services,
  onUpdate,
}: ServicesManagerProps) {
  const [editingService, setEditingService] = useState<Service | null>(null)

  const handleSaveService = async (service: Service) => {
    try {
      // Update in Firestore
      const serviceRef = doc(db, 'services', service.id)
      await setDoc(serviceRef, service, { merge: true })

      // Update local state
      const updatedServices = services.map((s) =>
        s.id === service.id ? service : s
      )
      onUpdate(updatedServices)
      setEditingService(null)
    } catch (error) {
      console.error('Error saving service:', error)
    }
  }

  return (
    <div className="space-y-6">
      {services.map((service) => (
        <div key={service.id} className="border rounded-lg p-4">
          {editingService?.id === service.id ? (
            <div className="space-y-4">
              <input
                type="text"
                value={editingService.title}
                onChange={(e) =>
                  setEditingService({
                    ...editingService,
                    title: e.target.value,
                  })
                }
                className="w-full p-2 border rounded"
              />
              <textarea
                value={editingService.content}
                onChange={(e) =>
                  setEditingService({
                    ...editingService,
                    content: e.target.value,
                  })
                }
                className="w-full p-2 border rounded h-24"
              />
              <div className="flex space-x-2">
                <button
                  onClick={() => handleSaveService(editingService)}
                  className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700"
                >
                  Save
                </button>
                <button
                  onClick={() => setEditingService(null)}
                  className="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700"
                >
                  Cancel
                </button>
              </div>
            </div>
          ) : (
            <div className="space-y-2">
              <div className="flex justify-between items-center">
                <h3 className="text-lg font-semibold">{service.title}</h3>
                <button
                  onClick={() => setEditingService(service)}
                  className="px-3 py-1 bg-blue-600 text-white rounded hover:bg-blue-700"
                >
                  Edit
                </button>
              </div>
              <p className="text-gray-600">{service.content}</p>
            </div>
          )}
        </div>
      ))}
    </div>
  )
}

================
File: app/admin/components/TabContentEditor.tsx
================
'use client'

import { useState } from 'react'
import { FlightTab, Widget } from '@/types/dashboard'
import dynamic from 'next/dynamic'

const WidgetEditor = dynamic(() => import('./WidgetEditor'), {
  ssr: false,
})

export interface TabContentEditorProps {
  tab: FlightTab
  onSave: (tab: FlightTab) => Promise<void>
  onCancel: () => void
}

export default function TabContentEditor({
  tab,
  onSave,
  onCancel,
}: TabContentEditorProps) {
  const [editingTab, setEditingTab] = useState<FlightTab>(tab)
  const [editingWidget, setEditingWidget] = useState<Widget | null>(null)
  const [deleteWidgetConfirm, setDeleteWidgetConfirm] = useState<string | null>(
    null
  )

  const handleAddWidget = (type: Widget['type']) => {
    const newWidget: Widget = {
      id: `widget-${Date.now()}`,
      type,
      title: `New ${type} Widget`,
      content: {},
      order: editingTab.widgets.length,
      settings: {},
    }
    setEditingWidget(newWidget)
  }

  const handleSaveWidget = (widget: Widget) => {
    const isNew = !editingTab.widgets.find((w) => w.id === widget.id)
    const updatedWidgets = isNew
      ? [...editingTab.widgets, widget]
      : editingTab.widgets.map((w) => (w.id === widget.id ? widget : w))

    setEditingTab({
      ...editingTab,
      widgets: updatedWidgets,
    })
    setEditingWidget(null)
  }

  const handleDeleteWidget = (widgetId: string) => {
    setEditingTab({
      ...editingTab,
      widgets: editingTab.widgets.filter((w) => w.id !== widgetId),
    })
    setDeleteWidgetConfirm(null)
  }

  const handleSaveTab = () => {
    onSave(editingTab)
  }

  return (
    <div className="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
        <div className="p-6">
          <h3 className="text-lg font-medium text-gray-900 mb-4">
            {tab.id.startsWith('tab-') ? 'Create New Tab' : 'Edit Tab'}
          </h3>

          {/* Tab Details */}
          <div className="space-y-4 mb-6">
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Title
              </label>
              <input
                type="text"
                value={editingTab.title}
                onChange={(e) =>
                  setEditingTab({ ...editingTab, title: e.target.value })
                }
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700">
                Description
              </label>
              <textarea
                value={editingTab.description}
                onChange={(e) =>
                  setEditingTab({ ...editingTab, description: e.target.value })
                }
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                rows={3}
              />
            </div>

            <div className="flex items-center">
              <input
                type="checkbox"
                checked={editingTab.active}
                onChange={(e) =>
                  setEditingTab({ ...editingTab, active: e.target.checked })
                }
                className="h-4 w-4 text-blue-600 rounded border-gray-300"
              />
              <label className="ml-2 block text-sm text-gray-900">Active</label>
            </div>
          </div>

          {/* Widgets Section */}
          <div className="border-t border-gray-200 pt-6">
            <div className="flex justify-between items-center mb-4">
              <h4 className="text-lg font-medium text-gray-900">Widgets</h4>
              <div className="flex space-x-2">
                <select
                  onChange={(e) =>
                    handleAddWidget(e.target.value as Widget['type'])
                  }
                  className="block w-full rounded-md border-gray-300 shadow-sm"
                  defaultValue=""
                >
                  <option value="" disabled>
                    Add Widget
                  </option>
                  <option value="priceChart">Price Chart</option>
                  <option value="promotionImage">Promotion Image</option>
                  <option value="announcement">Announcement</option>
                  <option value="info">Info</option>
                </select>
              </div>
            </div>

            {/* Widgets List */}
            <div className="space-y-4">
              {editingTab.widgets
                .sort((a, b) => a.order - b.order)
                .map((widget) => (
                  <div
                    key={widget.id}
                    className="flex items-center justify-between p-4 bg-gray-50 rounded-lg"
                  >
                    <div>
                      <h5 className="font-medium text-gray-900">
                        {widget.title}
                      </h5>
                      <p className="text-sm text-gray-500 capitalize">
                        {widget.type}
                      </p>
                    </div>
                    <div className="flex space-x-2">
                      <button
                        onClick={() => setEditingWidget(widget)}
                        className="px-3 py-1 bg-blue-600 text-white rounded hover:bg-blue-700"
                      >
                        Edit
                      </button>
                      {deleteWidgetConfirm === widget.id ? (
                        <>
                          <button
                            onClick={() => handleDeleteWidget(widget.id)}
                            className="px-3 py-1 bg-red-600 text-white rounded hover:bg-red-700"
                          >
                            Confirm
                          </button>
                          <button
                            onClick={() => setDeleteWidgetConfirm(null)}
                            className="px-3 py-1 bg-gray-600 text-white rounded hover:bg-gray-700"
                          >
                            Cancel
                          </button>
                        </>
                      ) : (
                        <button
                          onClick={() => setDeleteWidgetConfirm(widget.id)}
                          className="px-3 py-1 bg-red-600 text-white rounded hover:bg-red-700"
                        >
                          Delete
                        </button>
                      )}
                    </div>
                  </div>
                ))}
            </div>
          </div>

          {/* Action Buttons */}
          <div className="mt-6 flex justify-end space-x-3">
            <button
              onClick={onCancel}
              className="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50"
            >
              Cancel
            </button>
            <button
              onClick={handleSaveTab}
              className="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700"
            >
              Save
            </button>
          </div>
        </div>
      </div>

      {/* Widget Editor Modal */}
      {editingWidget && (
        <WidgetEditor
          widget={editingWidget}
          onSave={handleSaveWidget}
          onCancel={() => setEditingWidget(null)}
        />
      )}
    </div>
  )
}

================
File: app/admin/components/WidgetEditor.tsx
================
'use client'

import { useState } from 'react'
import { Widget } from '@/types/dashboard'
import PriceChartEditor from './widget-editors/PriceChartEditor'
import PromotionImageEditor from './widget-editors/PromotionImageEditor'
import AnnouncementEditor from './widget-editors/AnnouncementEditor'

interface WidgetEditorProps {
  widget: Widget
  onSave: (widget: Widget) => void
  onCancel: () => void
}

export default function WidgetEditor({
  widget,
  onSave,
  onCancel,
}: WidgetEditorProps) {
  const [editingWidget, setEditingWidget] = useState<Widget>(widget)

  const handleSave = () => {
    onSave(editingWidget)
  }

  const renderWidgetTypeEditor = () => {
    switch (editingWidget.type) {
      case 'priceChart':
        return (
          <PriceChartEditor
            widget={editingWidget}
            onChange={(updatedWidget: Widget) =>
              setEditingWidget(updatedWidget)
            }
          />
        )
      case 'promotionImage':
        return (
          <PromotionImageEditor
            widget={editingWidget}
            onChange={(updatedWidget: Widget) =>
              setEditingWidget(updatedWidget)
            }
          />
        )
      case 'announcement':
        return (
          <AnnouncementEditor
            widget={editingWidget}
            onChange={(updatedWidget: Widget) =>
              setEditingWidget(updatedWidget)
            }
          />
        )
      default:
        return null
    }
  }

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        <div className="p-6">
          <div className="flex justify-between items-center mb-6">
            <h3 className="text-lg font-medium text-gray-900">
              Edit {editingWidget.type} Widget
            </h3>
            <button
              onClick={onCancel}
              className="text-gray-400 hover:text-gray-500"
            >
              <span className="sr-only">Close</span>
              <svg
                className="h-6 w-6"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth="2"
                  d="M6 18L18 6M6 6l12 12"
                />
              </svg>
            </button>
          </div>

          {/* Common Widget Settings */}
          <div className="space-y-4 mb-6">
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Widget Title
              </label>
              <input
                type="text"
                value={editingWidget.title}
                onChange={(e) =>
                  setEditingWidget({ ...editingWidget, title: e.target.value })
                }
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700">
                Display Order
              </label>
              <input
                type="number"
                value={editingWidget.order}
                onChange={(e) =>
                  setEditingWidget({
                    ...editingWidget,
                    order: parseInt(e.target.value),
                  })
                }
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                min="0"
              />
            </div>
          </div>

          {/* Widget-specific Editor */}
          {renderWidgetTypeEditor()}

          {/* Action Buttons */}
          <div className="mt-6 flex justify-end space-x-3">
            <button
              onClick={onCancel}
              className="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50"
            >
              Cancel
            </button>
            <button
              onClick={handleSave}
              className="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700"
            >
              Save Changes
            </button>
          </div>
        </div>
      </div>
    </div>
  )
}

================
File: app/admin/dashboard/page.tsx
================
//app/admin/dashboard/page.tsx
'use client'

import { useState, useEffect, useCallback } from 'react'
import { useAuth } from '@/contexts/AuthContext'
import { useRouter } from 'next/navigation'
import { db } from '@/lib/firebaseConfig'
import {
  collection,
  doc,
  setDoc,
  onSnapshot,
  DocumentData,
} from 'firebase/firestore'
import ChartersManager from '../components/ChartersManager'
import ServicesManager from '../components/ServicesManager'
import FlightTabsManager from '../components/FlightTabsManager'
import type { Charter, Service } from '@/types/flight'
import type {
  FlightTab,
  Promotion,
  Announcement,
  DashboardData,
} from '@/types/dashboard'

// Initial dashboard metrics
const initialDashboardData: DashboardData = {
  totalFlights: 0,
  activePromotions: 0,
  activeAnnouncements: 0,
  recentBookings: 0,
  metrics: {
    daily: {
      bookings: 0,
      revenue: 0,
      visitors: 0,
    },
    weekly: {
      bookings: 0,
      revenue: 0,
      visitors: 0,
    },
    monthly: {
      bookings: 0,
      revenue: 0,
      visitors: 0,
    },
  },
}

type CollectionData = {
  services: Service[]
  charters: Charter[]
  flightTabs: FlightTab[]
  promotions: Promotion[]
  announcements: Announcement[]
}

type CollectionType = keyof CollectionData

const transformDoc = (doc: DocumentData) => {
  const data = doc.data()
  return {
    id: doc.id,
    ...data,
    ...(data.validFrom && {
      validFrom: data.validFrom.toDate(),
    }),
    ...(data.validUntil && {
      validUntil: data.validUntil.toDate(),
    }),
  }
}

export default function AdminDashboard() {
  const { user, loading, isAdmin, signOut } = useAuth()
  const router = useRouter()

  // State Management
  const [activeSection, setActiveSection] = useState<string>('overview')
  const [services, setServices] = useState<Service[]>([])
  const [charters, setCharters] = useState<Charter[]>([])
  const [flightTabs, setFlightTabs] = useState<FlightTab[]>([])
  const [promotions, setPromotions] = useState<Promotion[]>([])
  const [announcements, setAnnouncements] = useState<Announcement[]>([])
  const [dashboardData, setDashboardData] =
    useState<DashboardData>(initialDashboardData)
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [isSaving, setIsSaving] = useState(false)

  // Navigation Items
  const navigationItems = [
    { id: 'overview', label: 'Overview', icon: 'ChartPieIcon' },
    { id: 'flight-tabs', label: 'Flight Tabs', icon: 'TableCellsIcon' },
    { id: 'charters', label: 'Charters', icon: 'AirplaneIcon' },
    { id: 'services', label: 'Services', icon: 'BuildingStorefrontIcon' },
    { id: 'settings', label: 'Settings', icon: 'Cog6ToothIcon' },
  ]

  // Generic save handler for collections
  const handleSave = async (
    collectionName: string,
    data: any,
    id: string
  ): Promise<void> => {
    setIsSaving(true)
    try {
      const docRef = doc(db, collectionName, id)
      await setDoc(docRef, data, { merge: true })
    } catch (error) {
      setError(`Error saving ${collectionName}: ${error}`)
      throw error
    } finally {
      setIsSaving(false)
    }
  }

  // Collection-specific save handlers
  const handleSaveCharters = useCallback(async (updatedCharters: Charter[]) => {
    try {
      await Promise.all(
        updatedCharters.map((charter) =>
          handleSave('charters', charter, charter.id)
        )
      )
    } catch (error) {
      setError('Error saving charters')
    }
  }, [])

  const handleSaveServices = useCallback(async (updatedServices: Service[]) => {
    try {
      await Promise.all(
        updatedServices.map((service) =>
          handleSave('services', service, service.id)
        )
      )
    } catch (error) {
      setError('Error saving services')
    }
  }, [])

  const handleSaveFlightTabs = useCallback(async (tabs: FlightTab[]) => {
    try {
      await handleSave('flightTabs', { tabs }, 'flightTabs')
    } catch (error) {
      setError('Error saving flight tabs')
    }
  }, [])

  // Fetch Firestore Data
  useEffect(() => {
    if (!user || !isAdmin) return

    const collections: Array<{
      name: CollectionType
      setter: (data: any[]) => void
    }> = [
      { name: 'services', setter: setServices },
      { name: 'charters', setter: setCharters },
      { name: 'flightTabs', setter: setFlightTabs },
      { name: 'promotions', setter: setPromotions },
      { name: 'announcements', setter: setAnnouncements },
    ]

    const unsubscribers = collections.map(({ name, setter }) =>
      onSnapshot(
        collection(db, name),
        (snapshot) => {
          const data = snapshot.docs.map(transformDoc)
          setter(data)
        },
        (error) => {
          console.error(`Error fetching ${name}:`, error)
          setError(`Error loading ${name}`)
        }
      )
    )

    setIsLoading(false)

    return () => unsubscribers.forEach((unsubscribe) => unsubscribe())
  }, [user, isAdmin])

  // Loading and auth checks
  if (loading || isLoading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="text-xl">Loading...</div>
      </div>
    )
  }

  if (!user || !isAdmin) {
    router.push('/admin/login')
    return null
  }

  const renderActiveSection = () => {
    switch (activeSection) {
      case 'flight-tabs':
        return (
          <FlightTabsManager
            tabs={flightTabs}
            onUpdate={handleSaveFlightTabs}
          />
        )
      case 'charters':
        return (
          <ChartersManager charters={charters} onUpdate={handleSaveCharters} />
        )
      case 'services':
        return (
          <ServicesManager services={services} onUpdate={handleSaveServices} />
        )
      default:
        return null
    }
  }

  return (
    <div className="min-h-screen bg-gray-100">
      {/* Header */}
      <header className="bg-white shadow-sm sticky top-0 z-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
          <div className="flex justify-between items-center">
            <h1 className="text-2xl font-bold text-gray-900">
              CaribeFly Admin
            </h1>
            <div className="flex items-center space-x-4">
              <span className="text-sm text-gray-500">
                Logged in as: <span className="font-medium">{user.email}</span>
              </span>
              <button
                onClick={() => signOut()}
                className="px-4 py-2 bg-red-600 text-white text-sm rounded-lg hover:bg-red-700 transition"
              >
                Logout
              </button>
            </div>
          </div>
        </div>
      </header>

      <div className="flex h-[calc(100vh-4rem)]">
        {/* Sidebar Navigation */}
        <aside className="w-64 bg-white shadow-sm">
          <nav className="mt-5 px-2">
            <div className="space-y-1">
              {navigationItems.map((item) => (
                <button
                  key={item.id}
                  onClick={() => setActiveSection(item.id)}
                  className={`w-full group flex items-center px-2 py-2 text-sm font-medium rounded-md ${
                    activeSection === item.id
                      ? 'bg-blue-50 text-blue-600'
                      : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900'
                  }`}
                >
                  <span className="truncate">{item.label}</span>
                </button>
              ))}
            </div>
          </nav>
        </aside>

        {/* Main Content */}
        <main className="flex-1 overflow-y-auto bg-gray-50 p-6">
          {/* Notifications */}
          {error && (
            <div className="mb-6 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative">
              <strong className="font-bold">Error!</strong>
              <span className="block sm:inline"> {error}</span>
            </div>
          )}

          {isSaving && (
            <div className="mb-6 bg-blue-100 border border-blue-400 text-blue-700 px-4 py-3 rounded relative">
              <span className="block sm:inline">Saving changes...</span>
            </div>
          )}

          {/* Active Section Content */}
          <div className="bg-white rounded-lg shadow">
            {renderActiveSection()}
          </div>
        </main>
      </div>
    </div>
  )
}

================
File: app/admin/login/page.tsx
================
// app/admin/login/page.jsx

'use client'

import { useState } from 'react'
import { useRouter } from 'next/navigation'
import { signInWithEmailAndPassword } from 'firebase/auth'
import { auth } from '@/lib/firebaseConfig'
import nookies from 'nookies'

export default function AdminLoginPage() {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [error, setError] = useState('')
  const router = useRouter()

  const handleAdminLogin = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault()
    try {
      const userCredential = await signInWithEmailAndPassword(
        auth,
        email,
        password
      )
      const token = await userCredential.user.getIdTokenResult()

      // Check if user has the 'admin' custom claim
      if (token.claims.admin) {
        nookies.set(null, 'firebaseToken', token.token, { path: '/' })
        router.push('/admin/dashboard')
      } else {
        setError('Access denied: Admins only')
        auth.signOut()
      }
    } catch (err) {
      setError('Invalid email or password')
    }
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100">
      <div className="bg-white p-8 rounded shadow-md w-full max-w-md">
        <h2 className="text-2xl font-bold mb-4 text-center">Admin Login</h2>
        <form onSubmit={handleAdminLogin}>
          <input
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            placeholder="Admin Email"
            required
            className="w-full p-3 rounded border mb-4"
          />
          <input
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            placeholder="Password"
            required
            className="w-full p-3 rounded border mb-4"
          />
          <button
            type="submit"
            className="w-full p-3 bg-blue-600 text-white rounded"
          >
            Log In
          </button>
          {error && <p className="mt-4 text-red-500 text-center">{error}</p>}
        </form>
      </div>
    </div>
  )
}

================
File: app/components/flight-section/Announcements.tsx
================
// app/components/flight-section/Announcements.tsx
'use client'

import { Announcement } from '@/types/dashboard'

interface AnnouncementsProps {
  announcements: Announcement[]
}

export default function Announcements({ announcements }: AnnouncementsProps) {
  const activeAnnouncements = announcements.filter(
    (announcement) =>
      announcement.active &&
      new Date() >= new Date(announcement.validFrom) &&
      new Date() <= new Date(announcement.validUntil)
  )

  if (activeAnnouncements.length === 0) {
    return null
  }

  return (
    <div className="space-y-4">
      {activeAnnouncements.map((announcement) => (
        <div
          key={announcement.id}
          className={`p-4 rounded-lg ${
            announcement.type === 'alert'
              ? 'bg-red-50 border-l-4 border-red-500'
              : announcement.type === 'warning'
                ? 'bg-yellow-50 border-l-4 border-yellow-500'
                : 'bg-blue-50 border-l-4 border-blue-500'
          }`}
        >
          <div className="flex justify-between items-start">
            <div>
              <h4 className="font-semibold text-gray-900">
                {announcement.title}
              </h4>
              <p className="text-gray-800 mt-1">{announcement.content}</p>
            </div>
            <span
              className={`px-2 py-1 text-xs rounded-full ${
                announcement.priority === 'high'
                  ? 'bg-red-100 text-red-800'
                  : announcement.priority === 'normal'
                    ? 'bg-yellow-100 text-yellow-800'
                    : 'bg-green-100 text-green-800'
              }`}
            >
              {announcement.priority}
            </span>
          </div>
        </div>
      ))}
    </div>
  )
}

================
File: app/components/flight-section/FlightTabContent.tsx
================
// app/components/flight-section/FlightTabContent.tsx
'use client'

import { FlightTab, Widget } from '@/types/dashboard'
import PriceChart from './PriceChart'
import Promotions from './Promotions'
import Announcements from './Announcements'

interface FlightTabContentProps {
  tab: FlightTab
  data: {
    charters: any[]
    promotions: any[]
    announcements: any[]
  }
}

export default function FlightTabContent({ tab, data }: FlightTabContentProps) {
  const renderWidget = (widget: Widget) => {
    switch (widget.type) {
      case 'priceChart':
        return (
          <PriceChart
            charters={data.charters}
            autoUpdate={widget.settings?.autoUpdate}
          />
        )
      case 'promotionImage':
        return <Promotions images={data.promotions} />
      case 'announcement':
        return <Announcements announcements={data.announcements} />
      default:
        return null
    }
  }

  return (
    <div className="space-y-6">
      {tab.widgets
        .sort((a, b) => a.order - b.order)
        .map((widget) => (
          <div key={widget.id} className="bg-white rounded-lg shadow p-4">
            <h2 className="text-xl font-semibold mb-4">{widget.title}</h2>
            {renderWidget(widget)}
          </div>
        ))}
    </div>
  )
}

================
File: app/components/flight-section/PriceChart.tsx
================
import React from 'react'
import { Charter } from '@/types/flight'

interface PriceChartProps {
  charters: Charter[]
  autoUpdate?: boolean
}

export default function PriceChart({
  charters,
  autoUpdate = false,
}: PriceChartProps) {
  return (
    <div className="bg-white rounded-lg shadow-md p-4">
      <div className="overflow-x-auto">
        <table className="min-w-full">
          <thead>
            <tr>
              <th className="px-4 py-2 text-left">Charter</th>
              <th className="px-4 py-2 text-left">Route</th>
              <th className="px-4 py-2 text-right">Price</th>
              <th className="px-4 py-2 text-center">Last Updated</th>
            </tr>
          </thead>
          <tbody>
            {charters.map((charter) =>
              charter.flights?.map((flight, index) => (
                <tr key={`${charter.id}-${index}`} className="border-t">
                  <td className="px-4 py-2">{charter.title}</td>
                  <td className="px-4 py-2">{flight.route}</td>
                  <td className="px-4 py-2 text-right">{flight.price}</td>
                  <td className="px-4 py-2 text-center text-sm text-gray-500">
                    {new Date().toLocaleDateString()}
                  </td>
                </tr>
              ))
            )}
          </tbody>
        </table>
      </div>
    </div>
  )
}

================
File: app/components/FlightCard.tsx
================
'use client'

import { Charter, FlightAvailability } from '@/types/flight'
import { format } from 'date-fns'

interface FlightCardProps {
  charter: Charter
  availability: FlightAvailability
  onSelect: (charter: Charter, availability: FlightAvailability) => void
}

export default function FlightCard({
  charter,
  availability,
  onSelect,
}: FlightCardProps) {
  const formatTime = (time: string) =>
    format(new Date(`2000-01-01T${time}`), 'h:mm a')

  return (
    <div className="bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow duration-200">
      {/* Charter Header */}
      <div className="p-4 border-b bg-gray-50">
        <div className="flex justify-between items-center">
          <div>
            <h3 className="text-lg font-semibold">{charter.title}</h3>
            <p className="text-sm text-gray-600">
              Flight {availability.schedule.flightNumber}
            </p>
          </div>
          <div className="text-right">
            <p className="text-2xl font-bold text-blue-600">
              ${availability.pricing.regular.total}
            </p>
            <p className="text-xs text-gray-500">includes taxes and fees</p>
          </div>
        </div>
      </div>

      {/* Flight Details */}
      <div className="p-4">
        <div className="flex justify-between items-center mb-4">
          <div className="text-center">
            <p className="text-2xl font-bold">
              {formatTime(availability.schedule.departure)}
            </p>
            <p className="text-sm text-gray-600">
              {charter.routes[0].from.code}
            </p>
          </div>
          <div className="flex-1 px-4">
            <div className="relative">
              <div className="border-t-2 border-gray-300 w-full absolute top-1/2"></div>
              <div className="text-xs text-center text-gray-500 relative -top-2">
                Direct Flight
              </div>
            </div>
          </div>
          <div className="text-center">
            <p className="text-2xl font-bold">
              {formatTime(availability.schedule.arrival)}
            </p>
            <p className="text-sm text-gray-600">{charter.routes[0].to.code}</p>
          </div>
        </div>

        {/* Status and Seats */}
        <div className="flex justify-between items-center mb-4">
          <span
            className={`px-3 py-1 rounded-full text-sm ${
              availability.status === 'AVAILABLE'
                ? 'bg-green-100 text-green-800'
                : availability.status === 'LIMITED'
                  ? 'bg-yellow-100 text-yellow-800'
                  : 'bg-red-100 text-red-800'
            }`}
          >
            {availability.status}
          </span>
          <p className="text-sm text-gray-600">
            {availability.seatsAvailable} seats left at this price
          </p>
        </div>

        {/* Action Buttons */}
        <div className="flex space-x-2">
          <button
            onClick={() => onSelect(charter, availability)}
            className="flex-1 bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 
                     transition disabled:opacity-50 disabled:cursor-not-allowed"
            disabled={availability.status === 'SOLD_OUT'}
          >
            Select Flight
          </button>
          <button
            className="px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition"
            onClick={() => {
              /* Add fare details modal */
            }}
          >
            Fare Details
          </button>
        </div>
      </div>
    </div>
  )
}

================
File: app/components/FlightFilters.tsx
================
'use client'

interface FilterOptions {
  charter?: string
  maxPrice?: number
  departureTime?: 'morning' | 'afternoon' | 'evening'
  availabilityStatus?: 'AVAILABLE' | 'LIMITED' | 'SOLD_OUT'
}

interface FlightFiltersProps {
  onFilterChange: (filters: FilterOptions) => void
  availableCharters: string[]
  minPrice: number
  maxPrice: number
}

export default function FlightFilters({
  onFilterChange,
  availableCharters,
  minPrice,
  maxPrice,
}: FlightFiltersProps) {
  return (
    <div className="bg-white rounded-lg shadow p-4 space-y-4">
      <h3 className="font-semibold text-gray-900">Filters</h3>

      {/* Charter Filter */}
      <div>
        <label className="block text-sm font-medium text-gray-700">
          Charter
        </label>
        <select
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
          onChange={(e) => onFilterChange({ charter: e.target.value })}
        >
          <option value="">All Charters</option>
          {availableCharters.map((charter) => (
            <option key={charter} value={charter}>
              {charter}
            </option>
          ))}
        </select>
      </div>

      {/* Price Range */}
      <div>
        <label className="block text-sm font-medium text-gray-700">
          Max Price
        </label>
        <input
          type="range"
          min={minPrice}
          max={maxPrice}
          step="10"
          className="w-full"
          onChange={(e) => onFilterChange({ maxPrice: Number(e.target.value) })}
        />
      </div>

      {/* Departure Time */}
      <div>
        <label className="block text-sm font-medium text-gray-700">
          Departure Time
        </label>
        <div className="space-y-2">
          {['morning', 'afternoon', 'evening'].map((time) => (
            <label key={time} className="flex items-center">
              <input
                type="radio"
                name="departureTime"
                value={time}
                onChange={(e) =>
                  onFilterChange({
                    departureTime: e.target.value as
                      | 'morning'
                      | 'afternoon'
                      | 'evening',
                  })
                }
                className="form-radio"
              />
              <span className="ml-2 capitalize">{time}</span>
            </label>
          ))}
        </div>
      </div>

      {/* Availability */}
      <div>
        <label className="block text-sm font-medium text-gray-700">
          Availability
        </label>
        <select
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
          onChange={(e) =>
            onFilterChange({
              availabilityStatus: e.target.value as
                | 'AVAILABLE'
                | 'LIMITED'
                | 'SOLD_OUT',
            })
          }
        >
          <option value="">All</option>
          <option value="AVAILABLE">Available</option>
          <option value="LIMITED">Limited</option>
        </select>
      </div>
    </div>
  )
}

================
File: app/components/FlightSearch.tsx
================
//app/components/FlightSearch.tsx
'use client'

import { useState } from 'react'
import { format } from 'date-fns'
import type { SearchParams } from '@/types/flight'

interface FlightSearchProps {
  onSearch: (params: SearchParams) => void
  loading?: boolean
}

export default function FlightSearch({
  onSearch,
  loading = false,
}: FlightSearchProps) {
  const [searchParams, setSearchParams] = useState<SearchParams>({
    origin: 'MIA',
    destination: '',
    departureDate: new Date(),
    returnDate: undefined,
    passengers: 1,
    tripType: 'roundtrip',
  })

  const [showCalendar, setShowCalendar] = useState(false)

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    onSearch(searchParams)
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6"
    >
      {/* Trip Type Selection */}
      <div className="md:col-span-3 flex gap-4 justify-center">
        <label className="inline-flex items-center">
          <input
            type="radio"
            checked={searchParams.tripType === 'roundtrip'}
            onChange={() =>
              setSearchParams((prev) => ({ ...prev, tripType: 'roundtrip' }))
            }
            className="form-radio text-blue-600"
          />
          <span className="ml-2">Round Trip</span>
        </label>
        <label className="inline-flex items-center">
          <input
            type="radio"
            checked={searchParams.tripType === 'oneway'}
            onChange={() =>
              setSearchParams((prev) => ({ ...prev, tripType: 'oneway' }))
            }
            className="form-radio text-blue-600"
          />
          <span className="ml-2">One Way</span>
        </label>
      </div>

      {/* Origin & Destination */}
      <select
        value={searchParams.destination}
        onChange={(e) =>
          setSearchParams((prev) => ({ ...prev, destination: e.target.value }))
        }
        className="px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400"
        required
      >
        <option value="">Select Destination</option>
        <option value="HAV">Havana (HAV)</option>
        <option value="VRA">Varadero (VRA)</option>
        <option value="SNU">Santa Clara (SNU)</option>
        <option value="HOG">Holguin (HOG)</option>
        <option value="CMW">Camaguey (CMW)</option>
      </select>

      {/* Date Selection */}
      <div className="relative">
        <input
          type="date"
          value={format(searchParams.departureDate, 'yyyy-MM-dd')}
          onChange={(e) =>
            setSearchParams((prev) => ({
              ...prev,
              departureDate: new Date(e.target.value),
            }))
          }
          className="px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400 w-full"
          required
        />
      </div>

      {/* Passengers */}
      <input
        type="number"
        min="1"
        max="9"
        value={searchParams.passengers}
        onChange={(e) =>
          setSearchParams((prev) => ({
            ...prev,
            passengers: parseInt(e.target.value),
          }))
        }
        className="px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400"
        required
      />

      {/* Search Button */}
      <button
        type="submit"
        disabled={loading}
        className="md:col-span-3 bg-blue-600 text-white py-2 rounded-lg hover:bg-blue-700 transition disabled:opacity-50"
      >
        {loading ? 'Searching...' : 'Search Flights'}
      </button>
    </form>
  )
}

================
File: app/components/FlightSort.tsx
================
'use client'

export type SortOption = 'price' | 'departure' | 'availability' | 'charter'
export type SortDirection = 'asc' | 'desc'

interface FlightSortProps {
  onSort: (option: SortOption, direction: SortDirection) => void
  currentSort: {
    option: SortOption
    direction: SortDirection
  }
}

export default function FlightSort({ onSort, currentSort }: FlightSortProps) {
  return (
    <div className="bg-white rounded-lg shadow p-4">
      <div className="flex items-center space-x-4">
        <span className="text-sm font-medium text-gray-700">Sort by:</span>
        <div className="flex flex-wrap gap-2">
          {[
            { value: 'price', label: 'Price' },
            { value: 'departure', label: 'Departure Time' },
            { value: 'availability', label: 'Availability' },
            { value: 'charter', label: 'Charter' },
          ].map(({ value, label }) => (
            <button
              key={value}
              onClick={() =>
                onSort(
                  value as SortOption,
                  currentSort.option === value &&
                    currentSort.direction === 'asc'
                    ? 'desc'
                    : 'asc'
                )
              }
              className={`px-3 py-1 rounded-full text-sm flex items-center space-x-1
                ${
                  currentSort.option === value
                    ? 'bg-blue-100 text-blue-800'
                    : 'bg-gray-100 text-gray-800 hover:bg-gray-200'
                }`}
            >
              <span>{label}</span>
              {currentSort.option === value && (
                <svg
                  className={`w-4 h-4 transform ${
                    currentSort.direction === 'desc' ? 'rotate-180' : ''
                  }`}
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M5 15l7-7 7 7"
                  />
                </svg>
              )}
            </button>
          ))}
        </div>
      </div>
    </div>
  )
}

================
File: app/dashboard/page.tsx
================
//app/dashboard/page.tsx
'use client'

import { useAuth } from '../../hooks/useAuth'
import { useRouter } from 'next/navigation'
import { useEffect } from 'react'
import { signOut } from 'firebase/auth'
import { auth } from '../../lib/firebaseConfig'
import { destroyCookie } from 'nookies'

export default function Dashboard() {
  const user = useAuth()
  const router = useRouter()

  useEffect(() => {
    if (user === null) {
      router.push('/login')
    }
  }, [user, router])

  const handleLogout = async () => {
    await signOut(auth)
    destroyCookie(null, 'firebaseToken') // Clear the token
    router.push('/login')
  }

  if (user === undefined) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        Loading...
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-100">
      <div className="bg-blue-600 p-4 text-white text-center">
        <h1 className="text-4xl font-bold">Welcome to your Dashboard</h1>
        <p className="mt-2 text-xl">Hello, {user?.email}</p>
      </div>
      <div className="container mx-auto mt-10 p-4">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div className="p-6 bg-white rounded-lg shadow-md">
            <h2 className="text-2xl font-semibold mb-4">Profile Overview</h2>
            <p className="text-gray-700">
              This section can display user-specific details in the future.
            </p>
          </div>
          <div className="p-6 bg-white rounded-lg shadow-md">
            <h2 className="text-2xl font-semibold mb-4">Settings</h2>
            <p className="text-gray-700">
              Adjust your account settings here (coming soon).
            </p>
          </div>
        </div>
        <div className="mt-10 text-center">
          <button
            onClick={handleLogout}
            className="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600"
          >
            Logout
          </button>
        </div>
      </div>
    </div>
  )
}

================
File: app/login/page.tsx
================
'use client'

import { useState } from 'react'
import { signInWithEmailAndPassword } from 'firebase/auth'
import { auth } from '../../lib/firebaseConfig'
import { useRouter } from 'next/navigation'
import { useAuth } from '../../contexts/AuthContext'

export default function Login() {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [error, setError] = useState<string | null>(null)
  const router = useRouter()
  const { loading } = useAuth()

  const handleLogin = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault()
    try {
      await signInWithEmailAndPassword(auth, email, password)
      router.push('/dashboard')
    } catch (error) {
      setError('Invalid email or password. Please try again.')
      console.error('Login error', error)
    }
  }

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="text-xl">Loading...</div>
      </div>
    )
  }

  return (
    <div className="flex items-center justify-center min-h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900">
      <div className="w-full max-w-md p-8 space-y-6 bg-white rounded-xl shadow-lg">
        <h2 className="text-3xl font-extrabold text-center text-gray-900">
          Sign in to <span className="text-blue-600">CaribeFly</span>
        </h2>
        <form onSubmit={handleLogin} className="mt-8 space-y-4">
          <div>
            <label
              htmlFor="email"
              className="block text-sm font-medium text-gray-700"
            >
              Email address
            </label>
            <input
              id="email"
              name="email"
              type="email"
              required
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="w-full px-4 py-2 mt-1 border rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
              placeholder="you@example.com"
            />
          </div>

          <div>
            <label
              htmlFor="password"
              className="block text-sm font-medium text-gray-700"
            >
              Password
            </label>
            <input
              id="password"
              name="password"
              type="password"
              required
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="w-full px-4 py-2 mt-1 border rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
              placeholder="••••••••"
            />
          </div>

          <button
            type="submit"
            className="w-full py-3 mt-4 text-white bg-blue-600 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
          >
            Sign In
          </button>

          {error && <p className="mt-2 text-center text-red-500">{error}</p>}
        </form>

        <div className="flex items-center justify-between mt-6">
          <p className="text-sm text-gray-600">
            Dont have an account?{' '}
            <a
              href="/signup"
              className="font-medium text-blue-600 hover:underline"
            >
              Sign up
            </a>
          </p>
          <a
            href="/admin/login"
            className="text-sm font-medium text-blue-600 hover:underline"
          >
            Admin Login
          </a>
        </div>
      </div>
    </div>
  )
}

================
File: app/search/page.tsx
================
'use client'

import { useState, useEffect } from 'react'
import { format, addMinutes, isBefore } from 'date-fns'
import { useSearchParams } from 'next/navigation'
import FlightCard from '../components/FlightCard'
import FlightFilters from '../components/FlightFilters'
import FlightSort, { SortOption, SortDirection } from '../components/FlightSort'
import type { Charter, FlightAvailability, FilterOptions } from '@/types/flight'
import { XaelService } from '@/lib/services/xael-service'

interface SearchState {
  results: Array<{
    charter: Charter
    availability: FlightAvailability
  }>
  loading: boolean
  error: string | null
  timestamp: Date
  searchParams: {
    origin: string
    destination: string
    date: string
    passengers: number
    tripType: 'oneway' | 'roundtrip'
  }
  filters: FilterOptions
  sort: {
    option: SortOption
    direction: SortDirection
  }
}

export default function SearchResults() {
  const searchParams = useSearchParams()
  const [searchState, setSearchState] = useState<SearchState>({
    results: [],
    loading: true,
    error: null,
    timestamp: new Date(),
    searchParams: {
      origin: searchParams.get('origin') || 'MIA',
      destination: searchParams.get('destination') || '',
      date: searchParams.get('date') || '',
      passengers: Number(searchParams.get('passengers')) || 1,
      tripType:
        (searchParams.get('tripType') as 'oneway' | 'roundtrip') || 'roundtrip',
    },
    filters: {},
    sort: {
      option: 'price',
      direction: 'asc',
    },
  })

  // Fetch flight results
  useEffect(() => {
    const fetchResults = async () => {
      try {
        const xaelService = new XaelService({
          username: process.env.NEXT_PUBLIC_XAEL_USERNAME!,
          password: process.env.NEXT_PUBLIC_XAEL_PASSWORD!,
        })

        const results = await xaelService.getAvailability(
          searchState.searchParams.origin,
          searchState.searchParams.destination,
          new Date(searchState.searchParams.date)
        )

        setSearchState((prev) => ({
          ...prev,
          results: results.map((availability) => ({
            charter: {
              id: 'xael',
              title: 'XAEL Charters',
              system: 'airmax',
              routes: [
                {
                  from: { code: 'MIA', city: 'Miami' },
                  to: {
                    code: searchState.searchParams.destination,
                    city: 'Destination City',
                  },
                },
              ],
              schedules: [],
              pricing: {},
            },
            availability,
          })),
          loading: false,
        }))

        await xaelService.cleanup()
      } catch (error) {
        setSearchState((prev) => ({
          ...prev,
          error: 'Error fetching flights. Please try again.',
          loading: false,
        }))
      }
    }

    fetchResults()
  }, [searchState.searchParams])

  // Apply filters and sorting
  const filteredAndSortedResults = [...searchState.results]
    .filter((result) => {
      const { filters } = searchState
      if (filters.charter && result.charter.id !== filters.charter) return false
      if (
        filters.maxPrice &&
        result.availability.pricing.regular.total > filters.maxPrice
      )
        return false
      if (
        filters.availabilityStatus &&
        result.availability.status !== filters.availabilityStatus
      )
        return false
      return true
    })
    .sort((a, b) => {
      const { option, direction } = searchState.sort
      const modifier = direction === 'asc' ? 1 : -1

      switch (option) {
        case 'price':
          return (
            (a.availability.pricing.regular.total -
              b.availability.pricing.regular.total) *
            modifier
          )
        case 'departure':
          return (
            (new Date(a.availability.schedule.departure).getTime() -
              new Date(b.availability.schedule.departure).getTime()) *
            modifier
          )
        case 'availability':
          return (
            (b.availability.seatsAvailable - a.availability.seatsAvailable) *
            modifier
          )
        case 'charter':
          return a.charter.title.localeCompare(b.charter.title) * modifier
        default:
          return 0
      }
    })

  // Calculate validity period (15 minutes)
  const validUntil = addMinutes(searchState.timestamp, 15)
  const [isValid, setIsValid] = useState(true)

  // Check result validity
  useEffect(() => {
    const checkValidity = () => {
      setIsValid(isBefore(new Date(), validUntil))
    }

    const timer = setInterval(checkValidity, 1000)
    return () => clearInterval(timer)
  }, [validUntil])

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header with search summary */}
      <header className="bg-white shadow">
        <div className="max-w-7xl mx-auto px-4 py-6 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center">
            <div>
              <h1 className="text-2xl font-bold text-gray-900">
                Flight Results
              </h1>
              <p className="mt-1 text-sm text-gray-500">
                {searchState.searchParams.origin} to{' '}
                {searchState.searchParams.destination} •{' '}
                {format(
                  new Date(searchState.searchParams.date),
                  'MMM dd, yyyy'
                )}{' '}
                • {searchState.searchParams.passengers}{' '}
                {searchState.searchParams.passengers === 1
                  ? 'passenger'
                  : 'passengers'}
              </p>
            </div>
            {/* Validity timer */}
            <div
              className={`text-sm ${
                isValid ? 'text-green-600' : 'text-red-600'
              }`}
            >
              {isValid ? (
                <div>Results valid until: {format(validUntil, 'HH:mm:ss')}</div>
              ) : (
                <div className="flex items-center space-x-2">
                  <span>Results expired</span>
                  <button
                    onClick={() => window.location.reload()}
                    className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                  >
                    Refresh
                  </button>
                </div>
              )}
            </div>
          </div>
        </div>
      </header>

      {/* Main content */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="grid grid-cols-4 gap-6">
          {/* Filters */}
          <div className="col-span-1">
            <FlightFilters
              onFilterChange={(filters: FilterOptions) =>
                setSearchState((prev) => ({
                  ...prev,
                  filters: { ...prev.filters, ...filters },
                }))
              }
              availableCharters={['xael', 'cubazul', 'invicta']}
              minPrice={0}
              maxPrice={1000}
            />
          </div>

          {/* Results */}
          <div className="col-span-3">
            <FlightSort
              onSort={(option: SortOption, direction: SortDirection) =>
                setSearchState((prev) => ({
                  ...prev,
                  sort: { option, direction },
                }))
              }
              currentSort={searchState.sort}
            />

            <div className="mt-4 space-y-4">
              {searchState.loading ? (
                <div className="flex justify-center items-center min-h-[400px]">
                  <div className="text-center">
                    <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
                    <p className="mt-4 text-gray-600">
                      Searching for flights...
                    </p>
                  </div>
                </div>
              ) : searchState.error ? (
                <div className="text-center text-red-600">
                  {searchState.error}
                </div>
              ) : (
                filteredAndSortedResults.map((result, index) => (
                  <FlightCard
                    key={`${result.charter.id}-${index}`}
                    charter={result.charter}
                    availability={result.availability}
                    onSelect={(
                      charter: Charter,
                      availability: FlightAvailability
                    ) => {
                      // Handle flight selection
                      console.log('Selected flight:', { charter, availability })
                    }}
                  />
                ))
              )}
            </div>
          </div>
        </div>
      </main>
    </div>
  )
}

================
File: app/signup/page.tsx
================
//app/signup/page.tsx
'use client'

import { useState } from 'react'
import { createUserWithEmailAndPassword } from 'firebase/auth'
import { auth } from '../../lib/firebaseConfig'
import { useRouter } from 'next/navigation'

export default function Signup() {
  const [email, setEmail] = useState<string>('')
  const [password, setPassword] = useState<string>('')
  const [error, setError] = useState<string | null>(null)
  const router = useRouter()

  const handleSignup = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault()
    setError(null) // Clear previous error messages
    try {
      await createUserWithEmailAndPassword(auth, email, password)
      router.push('/dashboard')
    } catch (error: any) {
      setError(error.message) // Display error message if signup fails
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-600 to-blue-500 flex items-center justify-center">
      <div className="bg-white p-10 rounded-xl shadow-lg w-full max-w-md">
        <h1 className="text-3xl font-bold text-center mb-6 text-gray-800">
          Create an Account
        </h1>
        {error && (
          <div className="bg-red-100 text-red-700 p-2 rounded mb-4 text-center">
            {error}
          </div>
        )}
        <form onSubmit={handleSignup} className="flex flex-col space-y-4">
          <input
            type="email"
            placeholder="Email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
            className="w-full px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-400 transition"
          />
          <input
            type="password"
            placeholder="Password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
            className="w-full px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-400 transition"
          />
          <button
            type="submit"
            className="w-full bg-blue-600 text-white font-semibold py-2 rounded-lg hover:bg-blue-700 transition"
          >
            Sign Up
          </button>
        </form>
        <p className="text-center mt-4 text-gray-600">
          Already have an account?{' '}
          <a href="/login" className="text-blue-600 hover:underline">
            Log in
          </a>
        </p>
      </div>
    </div>
  )
}

================
File: app/globals.css
================
/* app/globals.css */
@import 'tailwindcss/base';
@import 'tailwindcss/components';
@import 'tailwindcss/utilities';

================
File: app/layout.tsx
================
// app/layout.tsx
import './globals.css'
import { ReactNode } from 'react'
import { AuthProvider } from '@/contexts/AuthContext'

export const metadata = {
  title: 'CaribeFly',
  description: 'Book your flights with ease!',
}

export default function RootLayout({ children }: { children: ReactNode }) {
  return (
    <html lang="en">
      <body className="min-h-screen bg-gray-100">
        <AuthProvider>{children}</AuthProvider>
      </body>
    </html>
  )
}

================
File: app/page.tsx
================
// app/page.tsx
'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { db } from '@/lib/firebaseConfig'
import { collection, getDocs } from 'firebase/firestore'
import FlightSearch from './components/FlightSearch'
import type { Charter, Service, SearchParams } from '@/types/flight'
import type { FlightTab } from '@/types/dashboard'

export default function Home() {
  const router = useRouter()
  const [loading, setLoading] = useState(true)
  const [services, setServices] = useState<Service[]>([])
  const [activeTab, setActiveTab] = useState<string>('flights')
  const [flightTabs, setFlightTabs] = useState<FlightTab[]>([])
  const [tabData, setTabData] = useState<any>({}) // We'll type this properly

  // Fetch initial data from Firestore
  useEffect(() => {
    const fetchData = async () => {
      try {
        // Fetch services and flight tabs
        const servicesSnapshot = await getDocs(collection(db, 'services'))
        const servicesData = servicesSnapshot.docs.map((doc) => ({
          id: doc.id,
          ...doc.data(),
        })) as Service[]
        setServices(servicesData)

        // Fetch flight tabs configuration
        const flightTabsSnapshot = await getDocs(collection(db, 'flightTabs'))
        const flightTabsData = flightTabsSnapshot.docs.map((doc) => ({
          id: doc.id,
          ...doc.data(),
        })) as FlightTab[]
        setFlightTabs(flightTabsData)

        // Fetch tab content data
        const chartersSnapshot = await getDocs(collection(db, 'charters'))
        const promotionsSnapshot = await getDocs(collection(db, 'promotions'))
        const announcementsSnapshot = await getDocs(
          collection(db, 'announcements')
        )

        setTabData({
          charters: chartersSnapshot.docs.map((doc) => ({
            id: doc.id,
            ...doc.data(),
          })),
          promotions: promotionsSnapshot.docs.map((doc) => ({
            id: doc.id,
            ...doc.data(),
          })),
          announcements: announcementsSnapshot.docs.map((doc) => ({
            id: doc.id,
            ...doc.data(),
          })),
        })
      } catch (error) {
        console.error('Error fetching data:', error)
      } finally {
        setLoading(false)
      }
    }

    fetchData()
  }, [])

  // Handle flight search
  const handleSearch = async (params: SearchParams) => {
    // Redirect to search results page with query parameters
    const searchParams = new URLSearchParams({
      origin: params.origin,
      destination: params.destination,
      date: params.departureDate.toISOString(),
      passengers: params.passengers.toString(),
      tripType: params.tripType,
    })

    router.push(`/search?${searchParams.toString()}`)
  }

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-500 to-purple-700">
        <div className="text-white text-xl">Loading...</div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-500 to-purple-700">
      {/* Header section */}
      <header className="flex flex-col md:flex-row justify-between items-center px-4 md:px-6 py-4 bg-white shadow-md">
        <h1 className="text-2xl font-bold text-blue-600 text-center md:text-left">
          CaribeFly
        </h1>
        <div className="mt-2 md:mt-0 space-x-2 flex justify-center">
          <button
            onClick={() => router.push('/login')}
            className="px-4 py-2 bg-gray-100 text-gray-800 rounded-lg hover:bg-gray-200 transition"
          >
            Log In
          </button>
          <button
            onClick={() => router.push('/signup')}
            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition"
          >
            Sign Up
          </button>
        </div>
      </header>

      {/* Hero section with search */}
      <div className="relative bg-white shadow-lg rounded-b-3xl p-6 md:p-10 mt-4">
        <h1 className="text-3xl md:text-4xl font-bold text-center mb-6 text-gray-800">
          Your Gateway to Cuba - Flights, Hotels, Rentals & More
        </h1>
        <FlightSearch onSearch={handleSearch} />
      </div>

      {/* Services section */}
      <div className="container mx-auto mt-8 md:mt-10 px-4 md:px-0">
        {/* Service tabs */}
        <div className="flex overflow-x-auto space-x-2 md:space-x-4 mb-4 md:mb-6 justify-start snap-x snap-mandatory">
          {services.map((service) => (
            <button
              key={service.id}
              className={`px-4 md:px-6 py-2 md:py-3 rounded-lg text-sm md:text-lg font-semibold transition whitespace-nowrap snap-start ${
                activeTab === service.id
                  ? 'bg-blue-600 text-white shadow-md'
                  : 'bg-gray-100 text-gray-800 hover:bg-gray-200'
              }`}
              onClick={() => setActiveTab(service.id)}
            >
              {service.title}
            </button>
          ))}
        </div>

        {/* Tab content */}
        {activeTab === 'flights' && (
          <div className="bg-gradient-to-br from-white to-blue-50 p-4 md:p-8 rounded-xl shadow-md">
            {flightTabs.map((tab) => (
              <FlightTabContent key={tab.id} tab={tab} data={tabData} />
            ))}
          </div>
        )}
      </div>

      {/* Footer */}
      <footer className="mt-10 md:mt-16 bg-blue-600 text-white py-4 text-center text-sm md:text-base">
        © {new Date().getFullYear()} CaribeFly - Your Travel Partner to Cuba
      </footer>
    </div>
  )
}

================
File: backup-repo.git/hooks/applypatch-msg.sample
================
#!/bin/sh
#
# An example hook script to check the commit log message taken by
# applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.  The hook is
# allowed to edit the commit message file.
#
# To enable this hook, rename this file to "applypatch-msg".

. git-sh-setup
commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
:

================
File: backup-repo.git/hooks/commit-msg.sample
================
#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

test "" = "$(grep '^Signed-off-by: ' "$1" |
	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
	echo >&2 Duplicate Signed-off-by lines.
	exit 1
}

================
File: backup-repo.git/hooks/fsmonitor-watchman.sample
================
#!/usr/bin/perl

use strict;
use warnings;
use IPC::Open2;

# An example hook script to integrate Watchman
# (https://facebook.github.io/watchman/) with git to speed up detecting
# new and modified files.
#
# The hook is passed a version (currently 2) and last update token
# formatted as a string and outputs to stdout a new update token and
# all files that have been modified since the update token. Paths must
# be relative to the root of the working tree and separated by a single NUL.
#
# To enable this hook, rename this file to "query-watchman" and set
# 'git config core.fsmonitor .git/hooks/query-watchman'
#
my ($version, $last_update_token) = @ARGV;

# Uncomment for debugging
# print STDERR "$0 $version $last_update_token\n";

# Check the hook interface version
if ($version ne 2) {
	die "Unsupported query-fsmonitor hook version '$version'.\n" .
	    "Falling back to scanning...\n";
}

my $git_work_tree = get_working_dir();

my $retry = 1;

my $json_pkg;
eval {
	require JSON::XS;
	$json_pkg = "JSON::XS";
	1;
} or do {
	require JSON::PP;
	$json_pkg = "JSON::PP";
};

launch_watchman();

sub launch_watchman {
	my $o = watchman_query();
	if (is_work_tree_watched($o)) {
		output_result($o->{clock}, @{$o->{files}});
	}
}

sub output_result {
	my ($clockid, @files) = @_;

	# Uncomment for debugging watchman output
	# open (my $fh, ">", ".git/watchman-output.out");
	# binmode $fh, ":utf8";
	# print $fh "$clockid\n@files\n";
	# close $fh;

	binmode STDOUT, ":utf8";
	print $clockid;
	print "\0";
	local $, = "\0";
	print @files;
}

sub watchman_clock {
	my $response = qx/watchman clock "$git_work_tree"/;
	die "Failed to get clock id on '$git_work_tree'.\n" .
		"Falling back to scanning...\n" if $? != 0;

	return $json_pkg->new->utf8->decode($response);
}

sub watchman_query {
	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
	or die "open2() failed: $!\n" .
	"Falling back to scanning...\n";

	# In the query expression below we're asking for names of files that
	# changed since $last_update_token but not from the .git folder.
	#
	# To accomplish this, we're using the "since" generator to use the
	# recency index to select candidate nodes and "fields" to limit the
	# output to file names only. Then we're using the "expression" term to
	# further constrain the results.
	my $last_update_line = "";
	if (substr($last_update_token, 0, 1) eq "c") {
		$last_update_token = "\"$last_update_token\"";
		$last_update_line = qq[\n"since": $last_update_token,];
	}
	my $query = <<"	END";
		["query", "$git_work_tree", {$last_update_line
			"fields": ["name"],
			"expression": ["not", ["dirname", ".git"]]
		}]
	END

	# Uncomment for debugging the watchman query
	# open (my $fh, ">", ".git/watchman-query.json");
	# print $fh $query;
	# close $fh;

	print CHLD_IN $query;
	close CHLD_IN;
	my $response = do {local $/; <CHLD_OUT>};

	# Uncomment for debugging the watch response
	# open ($fh, ">", ".git/watchman-response.json");
	# print $fh $response;
	# close $fh;

	die "Watchman: command returned no output.\n" .
	"Falling back to scanning...\n" if $response eq "";
	die "Watchman: command returned invalid output: $response\n" .
	"Falling back to scanning...\n" unless $response =~ /^\{/;

	return $json_pkg->new->utf8->decode($response);
}

sub is_work_tree_watched {
	my ($output) = @_;
	my $error = $output->{error};
	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
		$retry--;
		my $response = qx/watchman watch "$git_work_tree"/;
		die "Failed to make watchman watch '$git_work_tree'.\n" .
		    "Falling back to scanning...\n" if $? != 0;
		$output = $json_pkg->new->utf8->decode($response);
		$error = $output->{error};
		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		# Uncomment for debugging watchman output
		# open (my $fh, ">", ".git/watchman-output.out");
		# close $fh;

		# Watchman will always return all files on the first query so
		# return the fast "everything is dirty" flag to git and do the
		# Watchman query just to get it over with now so we won't pay
		# the cost in git to look up each individual file.
		my $o = watchman_clock();
		$error = $output->{error};

		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		output_result($o->{clock}, ("/"));
		$last_update_token = $o->{clock};

		eval { launch_watchman() };
		return 0;
	}

	die "Watchman: $error.\n" .
	"Falling back to scanning...\n" if $error;

	return 1;
}

sub get_working_dir {
	my $working_dir;
	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
		$working_dir = Win32::GetCwd();
		$working_dir =~ tr/\\/\//;
	} else {
		require Cwd;
		$working_dir = Cwd::cwd();
	}

	return $working_dir;
}

================
File: backup-repo.git/hooks/post-update.sample
================
#!/bin/sh
#
# An example hook script to prepare a packed repository for use over
# dumb transports.
#
# To enable this hook, rename this file to "post-update".

exec git update-server-info

================
File: backup-repo.git/hooks/pre-applypatch.sample
================
#!/bin/sh
#
# An example hook script to verify what is about to be committed
# by applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-applypatch".

. git-sh-setup
precommit="$(git rev-parse --git-path hooks/pre-commit)"
test -x "$precommit" && exec "$precommit" ${1+"$@"}
:

================
File: backup-repo.git/hooks/pre-commit.sample
================
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --

================
File: backup-repo.git/hooks/pre-merge-commit.sample
================
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git merge" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message to
# stderr if it wants to stop the merge commit.
#
# To enable this hook, rename this file to "pre-merge-commit".

. git-sh-setup
test -x "$GIT_DIR/hooks/pre-commit" &&
        exec "$GIT_DIR/hooks/pre-commit"
:

================
File: backup-repo.git/hooks/pre-push.sample
================
#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')

while read local_ref local_oid remote_ref remote_oid
do
	if test "$local_oid" = "$zero"
	then
		# Handle delete
		:
	else
		if test "$remote_oid" = "$zero"
		then
			# New branch, examine all commits
			range="$local_oid"
		else
			# Update to existing branch, examine new commits
			range="$remote_oid..$local_oid"
		fi

		# Check for WIP commit
		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
		if test -n "$commit"
		then
			echo >&2 "Found WIP commit in $local_ref, not pushing"
			exit 1
		fi
	fi
done

exit 0

================
File: backup-repo.git/hooks/pre-rebase.sample
================
#!/bin/sh
#
# Copyright (c) 2006, 2008 Junio C Hamano
#
# The "pre-rebase" hook is run just before "git rebase" starts doing
# its job, and can prevent the command from running by exiting with
# non-zero status.
#
# The hook is called with the following parameters:
#
# $1 -- the upstream the series was forked from.
# $2 -- the branch being rebased (or empty when rebasing the current branch).
#
# This sample shows how to prevent topic branches that are already
# merged to 'next' branch from getting rebased, because allowing it
# would result in rebasing already published history.

publish=next
basebranch="$1"
if test "$#" = 2
then
	topic="refs/heads/$2"
else
	topic=`git symbolic-ref HEAD` ||
	exit 0 ;# we do not interrupt rebasing detached HEAD
fi

case "$topic" in
refs/heads/??/*)
	;;
*)
	exit 0 ;# we do not interrupt others.
	;;
esac

# Now we are dealing with a topic branch being rebased
# on top of master.  Is it OK to rebase it?

# Does the topic really exist?
git show-ref -q "$topic" || {
	echo >&2 "No such branch $topic"
	exit 1
}

# Is topic fully merged to master?
not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
if test -z "$not_in_master"
then
	echo >&2 "$topic is fully merged to master; better remove it."
	exit 1 ;# we could allow it, but there is no point.
fi

# Is topic ever merged to next?  If so you should not be rebasing it.
only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
only_next_2=`git rev-list ^master           ${publish} | sort`
if test "$only_next_1" = "$only_next_2"
then
	not_in_topic=`git rev-list "^$topic" master`
	if test -z "$not_in_topic"
	then
		echo >&2 "$topic is already up to date with master"
		exit 1 ;# we could allow it, but there is no point.
	else
		exit 0
	fi
else
	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
	/usr/bin/perl -e '
		my $topic = $ARGV[0];
		my $msg = "* $topic has commits already merged to public branch:\n";
		my (%not_in_next) = map {
			/^([0-9a-f]+) /;
			($1 => 1);
		} split(/\n/, $ARGV[1]);
		for my $elem (map {
				/^([0-9a-f]+) (.*)$/;
				[$1 => $2];
			} split(/\n/, $ARGV[2])) {
			if (!exists $not_in_next{$elem->[0]}) {
				if ($msg) {
					print STDERR $msg;
					undef $msg;
				}
				print STDERR " $elem->[1]\n";
			}
		}
	' "$topic" "$not_in_next" "$not_in_master"
	exit 1
fi

<<\DOC_END

This sample hook safeguards topic branches that have been
published from being rewound.

The workflow assumed here is:

 * Once a topic branch forks from "master", "master" is never
   merged into it again (either directly or indirectly).

 * Once a topic branch is fully cooked and merged into "master",
   it is deleted.  If you need to build on top of it to correct
   earlier mistakes, a new topic branch is created by forking at
   the tip of the "master".  This is not strictly necessary, but
   it makes it easier to keep your history simple.

 * Whenever you need to test or publish your changes to topic
   branches, merge them into "next" branch.

The script, being an example, hardcodes the publish branch name
to be "next", but it is trivial to make it configurable via
$GIT_DIR/config mechanism.

With this workflow, you would want to know:

(1) ... if a topic branch has ever been merged to "next".  Young
    topic branches can have stupid mistakes you would rather
    clean up before publishing, and things that have not been
    merged into other branches can be easily rebased without
    affecting other people.  But once it is published, you would
    not want to rewind it.

(2) ... if a topic branch has been fully merged to "master".
    Then you can delete it.  More importantly, you should not
    build on top of it -- other people may already want to
    change things related to the topic as patches against your
    "master", so if you need further changes, it is better to
    fork the topic (perhaps with the same name) afresh from the
    tip of "master".

Let's look at this example:

		   o---o---o---o---o---o---o---o---o---o "next"
		  /       /           /           /
		 /   a---a---b A     /           /
		/   /               /           /
	       /   /   c---c---c---c B         /
	      /   /   /             \         /
	     /   /   /   b---b C     \       /
	    /   /   /   /             \     /
    ---o---o---o---o---o---o---o---o---o---o---o "master"


A, B and C are topic branches.

 * A has one fix since it was merged up to "next".

 * B has finished.  It has been fully merged up to "master" and "next",
   and is ready to be deleted.

 * C has not merged to "next" at all.

We would want to allow C to be rebased, refuse A, and encourage
B to be deleted.

To compute (1):

	git rev-list ^master ^topic next
	git rev-list ^master        next

	if these match, topic has not merged in next at all.

To compute (2):

	git rev-list master..topic

	if this is empty, it is fully merged to "master".

DOC_END

================
File: backup-repo.git/hooks/pre-receive.sample
================
#!/bin/sh
#
# An example hook script to make use of push options.
# The example simply echoes all push options that start with 'echoback='
# and rejects all pushes when the "reject" push option is used.
#
# To enable this hook, rename this file to "pre-receive".

if test -n "$GIT_PUSH_OPTION_COUNT"
then
	i=0
	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
	do
		eval "value=\$GIT_PUSH_OPTION_$i"
		case "$value" in
		echoback=*)
			echo "echo from the pre-receive-hook: ${value#*=}" >&2
			;;
		reject)
			exit 1
		esac
		i=$((i + 1))
	done
fi

================
File: backup-repo.git/hooks/prepare-commit-msg.sample
================
#!/bin/sh
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples. The first one removes the
# "# Please enter the commit message..." help message.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"

# case "$COMMIT_SOURCE,$SHA1" in
#  ,|template,)
#    /usr/bin/perl -i.bak -pe '
#       print "\n" . `git diff --cached --name-status -r`
# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
#  *) ;;
# esac

# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
# if test -z "$COMMIT_SOURCE"
# then
#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
# fi

================
File: backup-repo.git/hooks/push-to-checkout.sample
================
#!/bin/sh

# An example hook script to update a checked-out tree on a git push.
#
# This hook is invoked by git-receive-pack(1) when it reacts to git
# push and updates reference(s) in its repository, and when the push
# tries to update the branch that is currently checked out and the
# receive.denyCurrentBranch configuration variable is set to
# updateInstead.
#
# By default, such a push is refused if the working tree and the index
# of the remote repository has any difference from the currently
# checked out commit; when both the working tree and the index match
# the current commit, they are updated to match the newly pushed tip
# of the branch. This hook is to be used to override the default
# behaviour; however the code below reimplements the default behaviour
# as a starting point for convenient modification.
#
# The hook receives the commit with which the tip of the current
# branch is going to be updated:
commit=$1

# It can exit with a non-zero status to refuse the push (when it does
# so, it must not modify the index or the working tree).
die () {
	echo >&2 "$*"
	exit 1
}

# Or it can make any necessary changes to the working tree and to the
# index to bring them to the desired state when the tip of the current
# branch is updated to the new commit, and exit with a zero status.
#
# For example, the hook can simply run git read-tree -u -m HEAD "$1"
# in order to emulate git fetch that is run in the reverse direction
# with git push, as the two-tree form of git read-tree -u -m is
# essentially the same as git switch or git checkout that switches
# branches while keeping the local changes in the working tree that do
# not interfere with the difference between the branches.

# The below is a more-or-less exact translation to shell of the C code
# for the default behaviour for git's push-to-checkout hook defined in
# the push_to_deploy() function in builtin/receive-pack.c.
#
# Note that the hook will be executed from the repository directory,
# not from the working tree, so if you want to perform operations on
# the working tree, you will have to adapt your code accordingly, e.g.
# by adding "cd .." or using relative paths.

if ! git update-index -q --ignore-submodules --refresh
then
	die "Up-to-date check failed"
fi

if ! git diff-files --quiet --ignore-submodules --
then
	die "Working directory has unstaged changes"
fi

# This is a rough translation of:
#
#   head_has_history() ? "HEAD" : EMPTY_TREE_SHA1_HEX
if git cat-file -e HEAD 2>/dev/null
then
	head=HEAD
else
	head=$(git hash-object -t tree --stdin </dev/null)
fi

if ! git diff-index --quiet --cached --ignore-submodules $head --
then
	die "Working directory has staged changes"
fi

if ! git read-tree -u -m "$commit"
then
	die "Could not update working tree to new HEAD"
fi

================
File: backup-repo.git/hooks/update.sample
================
#!/bin/sh
#
# An example hook script to block unannotated tags from entering.
# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
#
# To enable this hook, rename this file to "update".
#
# Config
# ------
# hooks.allowunannotated
#   This boolean sets whether unannotated tags will be allowed into the
#   repository.  By default they won't be.
# hooks.allowdeletetag
#   This boolean sets whether deleting tags will be allowed in the
#   repository.  By default they won't be.
# hooks.allowmodifytag
#   This boolean sets whether a tag may be modified after creation. By default
#   it won't be.
# hooks.allowdeletebranch
#   This boolean sets whether deleting branches will be allowed in the
#   repository.  By default they won't be.
# hooks.denycreatebranch
#   This boolean sets whether remotely creating branches will be denied
#   in the repository.  By default this is allowed.
#

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

# --- Safety check
if [ -z "$GIT_DIR" ]; then
	echo "Don't run this script from the command line." >&2
	echo " (if you want, you could supply GIT_DIR then run" >&2
	echo "  $0 <ref> <oldrev> <newrev>)" >&2
	exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
	exit 1
fi

# --- Config
allowunannotated=$(git config --type=bool hooks.allowunannotated)
allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
allowmodifytag=$(git config --type=bool hooks.allowmodifytag)

# check for no description
projectdesc=$(sed -e '1q' "$GIT_DIR/description")
case "$projectdesc" in
"Unnamed repository"* | "")
	echo "*** Project description file hasn't been set" >&2
	exit 1
	;;
esac

# --- Check types
# if $newrev is 0000...0000, it's a commit to delete a ref.
zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
if [ "$newrev" = "$zero" ]; then
	newrev_type=delete
else
	newrev_type=$(git cat-file -t $newrev)
fi

case "$refname","$newrev_type" in
	refs/tags/*,commit)
		# un-annotated tag
		short_refname=${refname##refs/tags/}
		if [ "$allowunannotated" != "true" ]; then
			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
			exit 1
		fi
		;;
	refs/tags/*,delete)
		# delete tag
		if [ "$allowdeletetag" != "true" ]; then
			echo "*** Deleting a tag is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/tags/*,tag)
		# annotated tag
		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
		then
			echo "*** Tag '$refname' already exists." >&2
			echo "*** Modifying a tag is not allowed in this repository." >&2
			exit 1
		fi
		;;
	refs/heads/*,commit)
		# branch
		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
			echo "*** Creating a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/heads/*,delete)
		# delete branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/remotes/*,commit)
		# tracking branch
		;;
	refs/remotes/*,delete)
		# delete tracking branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	*)
		# Anything else (is there anything else?)
		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
		exit 1
		;;
esac

# --- Finished
exit 0

================
File: backup-repo.git/info/exclude
================
# git ls-files --others --exclude-from=.git/info/exclude
# Lines that start with '#' are comments.
# For a project mostly in C, the following would be a good set of
# exclude patterns (uncomment them if you want to use them):
# *.[oa]
# *~

================
File: backup-repo.git/config
================
[core]
	repositoryformatversion = 0
	filemode = true
	bare = true
	ignorecase = true
	precomposeunicode = true
[remote "origin"]
	url = https://github.com/LuisFaxas/caribefly-website
	fetch = +refs/*:refs/*
	mirror = true

================
File: backup-repo.git/description
================
Unnamed repository; edit this file 'description' to name the repository.

================
File: backup-repo.git/HEAD
================
ref: refs/heads/main

================
File: backup-repo.git/packed-refs
================
# pack-refs with: peeled fully-peeled sorted 
80c05ceeca626396d5f08b8a267dcec8be80a8b0 refs/heads/main

================
File: contexts/AuthContext.tsx
================
'use client'

import { createContext, useContext, useEffect, useState } from 'react'
import { User, onAuthStateChanged } from 'firebase/auth'
import { auth } from '@/lib/firebaseConfig'
import { useRouter } from 'next/navigation'
import { destroyCookie, setCookie } from 'nookies'

interface AuthContextType {
  user: User | null
  loading: boolean
  isAdmin: boolean
  signOut: () => Promise<void>
}

const AuthContext = createContext<AuthContextType>({
  user: null,
  loading: true,
  isAdmin: false,
  signOut: async () => {},
})

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(null)
  const [loading, setLoading] = useState(true)
  const [isAdmin, setIsAdmin] = useState(false)
  const router = useRouter()

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (currentUser) => {
      if (currentUser) {
        const tokenResult = await currentUser.getIdTokenResult()
        const token = await currentUser.getIdToken()

        setIsAdmin(!!tokenResult.claims.admin)
        setUser(currentUser)

        setCookie(null, 'firebaseToken', token, {
          maxAge: 30 * 24 * 60 * 60,
          path: '/',
        })
      } else {
        setUser(null)
        setIsAdmin(false)
        destroyCookie(null, 'firebaseToken')
      }
      setLoading(false)
    })

    return () => unsubscribe()
  }, [])

  const signOut = async () => {
    try {
      await auth.signOut()
      destroyCookie(null, 'firebaseToken')
      router.push('/login')
    } catch (error) {
      console.error('Sign out error:', error)
    }
  }

  return (
    <AuthContext.Provider value={{ user, loading, isAdmin, signOut }}>
      {children}
    </AuthContext.Provider>
  )
}

export const useAuth = () => useContext(AuthContext)

================
File: functions/.eslintrc.js
================
module.exports = {
  env: {
    es6: true,
    node: true,
  },
  parserOptions: {
    ecmaVersion: 2018,
  },
  extends: [
    "eslint:recommended",
    "google",
    "plugin:prettier/recommended", // Integrates Prettier with ESLint
  ],
  plugins: ["prettier"], // Adds Prettier as a plugin
  rules: {
    "no-restricted-globals": ["error", "name", "length"],
    "prefer-arrow-callback": "error",
    quotes: ["error", "double", { allowTemplateLiterals: true }],
    "prettier/prettier": "error", // Shows Prettier errors as ESLint errors
  },
  overrides: [
    {
      files: ["**/*.spec.*"],
      env: {
        mocha: true,
      },
      rules: {},
    },
  ],
  globals: {},
}

================
File: functions/.gitignore
================
node_modules/
*.local

================
File: functions/.prettierrc
================
{
  "semi": false,
  "singleQuote": false,
  "tabWidth": 2,
  "trailingComma": "es5"
}

================
File: functions/index.js
================
// functions/index.js

const functions = require("firebase-functions")
const admin = require("firebase-admin")

// Initialize Firebase Admin SDK
admin.initializeApp()

// Cloud Function to set admin claim
exports.addAdminRole = functions.https.onCall(async (data, context) => {
  // Check if the request is coming from an authenticated admin
  if (!context.auth.token.admin) {
    return { error: "Only admins can add other admins" }
  }

  try {
    // Set the admin claim for the specified user UID
    await admin.auth().setCustomUserClaims(data.uid, { admin: true })
    return { message: `Admin claim set for user with UID: ${data.uid}` }
  } catch (error) {
    console.error("Error setting admin claim:", error)
    return { error: "Failed to set admin claim" }
  }
})

================
File: functions/package.json
================
{
  "name": "functions",
  "description": "Cloud Functions for Firebase",
  "scripts": {
    "lint": "eslint . --ext .js",
    "serve": "firebase emulators:start --only functions",
    "shell": "firebase functions:shell",
    "start": "npm run shell",
    "deploy": "firebase deploy --only functions",
    "logs": "firebase functions:log",
    "format": "prettier --write ."
  },
  "engines": {
    "node": "18"
  },
  "main": "index.js",
  "dependencies": {
    "firebase-admin": "^12.6.0",
    "firebase-functions": "^6.0.1"
  },
  "devDependencies": {
    "eslint": "^8.15.0",
    "eslint-config-google": "^0.14.0",
    "firebase-functions-test": "^3.1.0"
  },
  "private": true
}

================
File: hooks/useAuth.ts
================
// app/hooks/useAuth.ts
import { useState, useEffect } from 'react'
import { onAuthStateChanged, User } from 'firebase/auth'
import { auth } from '../lib/firebaseConfig'

export function useAuth() {
  const [user, setUser] = useState<User | null | undefined>(undefined) // Add undefined for initial loading state

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (currentUser) => {
      setUser(currentUser) // Set the user when state changes
    })
    return () => unsubscribe()
  }, [])

  return user
}

================
File: lib/config/xael-config.ts
================
export const XAEL_CONFIG = {
  credentials: {
    username: process.env.XAEL_USERNAME || '',
    password: process.env.XAEL_PASSWORD || '',
  },
  baseUrl: 'https://xaelsuite.com',
  endpoints: {
    login: '/login.aspx',
    newReservation: '/Reservations/NewReservation.aspx',
    flightSchedule: '/Reservations/FlightSchedule.aspx',
  },
  selectors: {
    loginForm: {
      username: '#txtUserName',
      password: '#txtPassword',
      submitButton: '#btnLogin',
    },
    searchForm: {
      origin: '#DropDownList_Origin',
      destination: '#DropDownList_Dest',
      date: '#DatePicker_Travel',
      searchButton: '#ButtonInquiry',
    },
    results: {
      flightGrid: '.flight-grid',
      flightRow: '.flight-grid tr',
      availabilityCell: 'td:nth-child(4)',
    },
  },
}

================
File: lib/services/xael-service.ts
================
import { Browser, Page } from 'puppeteer'
import puppeteer from 'puppeteer'
import { FlightAvailability, FlightSchedule, FlightPrice } from '@/types/flight'

interface XaelCredentials {
  username: string
  password: string
}

interface XaelFlightData {
  flightNumber: string
  departure: string
  arrival: string
  seatsAvailable: number
  price: {
    regular: number
    firstClass?: number
  }
}

export class XaelService {
  private browser: Browser | null = null
  private page: Page | null = null
  private isLoggedIn: boolean = false

  constructor(private credentials: XaelCredentials) {}

  private async initialize() {
    if (!this.browser) {
      this.browser = await puppeteer.launch({
        headless: true, // Set to false for debugging
      })
    }
  }

  private async handleModal() {
    if (!this.page) return

    try {
      // Wait for potential modal with a short timeout
      await this.page.waitForSelector('div[role="dialog"]', { timeout: 3000 })

      // If modal exists, try different potential close buttons
      const closeButtons = await this.page.$$(
        [
          'button[class*="close"]',
          'button[class*="modal-close"]',
          'button[aria-label="Close"]',
          '.modal-close-button',
          '.close-button',
        ].join(',')
      )

      if (closeButtons.length > 0) {
        await closeButtons[0].click()
        // Wait for modal to disappear
        await this.page.waitForSelector('div[role="dialog"]', {
          hidden: true,
          timeout: 3000,
        })
      }
    } catch (error) {
      // No modal found or timeout, continue normally
      console.log('No modal found or already closed')
    }
  }

  async login() {
    try {
      await this.initialize()
      if (!this.browser) throw new Error('Browser not initialized')

      this.page = await this.browser.newPage()

      // Navigate to XAEL login page
      await this.page.goto('https://xaelsuite.com/login.aspx')

      // Handle any initial modal
      await this.handleModal()

      // Fill login form
      await this.page.type('#txtUserName', this.credentials.username)
      await this.page.type('#txtPassword', this.credentials.password)
      await this.page.click('#btnLogin')

      // Wait for navigation
      await this.page.waitForNavigation()

      // Handle potential post-login modal
      await this.handleModal()

      // Check if login was successful
      const isLoggedIn = await this.page.evaluate(() => {
        return !document.querySelector('.login-error')
      })

      if (!isLoggedIn) {
        throw new Error('Login failed')
      }

      this.isLoggedIn = true
    } catch (error) {
      console.error('XAEL login error:', error)
      throw error
    }
  }

  async getAvailability(
    from: string,
    to: string,
    date: Date
  ): Promise<FlightAvailability[]> {
    try {
      if (!this.isLoggedIn) {
        await this.login()
      }

      if (!this.page) throw new Error('Page not initialized')

      // Navigate to flight search page
      await this.page.goto(
        'https://xaelsuite.com/Reservations/NewReservation.aspx'
      )

      // Handle any modal that might appear
      await this.handleModal()

      // Fill search form
      await this.page.select('#DropDownList_Origin', from)
      await this.page.select('#DropDownList_Dest', to)
      await this.page.type(
        '#DatePicker_Travel',
        date.toISOString().split('T')[0]
      )

      // Handle any modal that might appear before search
      await this.handleModal()

      await this.page.click('#ButtonInquiry')

      // Wait for results and extract data
      await this.page.waitForSelector('.flight-grid')

      // Handle any modal that might appear after search
      await this.handleModal()

      const flights = await this.page.evaluate(() => {
        const rows = document.querySelectorAll('.flight-grid tr')
        const flightData: XaelFlightData[] = []

        rows.forEach((row) => {
          const cells = row.querySelectorAll('td')
          if (cells.length >= 4) {
            flightData.push({
              flightNumber: cells[0].textContent?.trim() || '',
              departure: cells[1].textContent?.trim() || '',
              arrival: cells[2].textContent?.trim() || '',
              seatsAvailable: parseInt(cells[3].textContent?.trim() || '0', 10),
              price: {
                regular: parseFloat(
                  cells[4].textContent?.replace('$', '').trim() || '0'
                ),
                firstClass: cells[5]?.textContent
                  ? parseFloat(cells[5].textContent.replace('$', '').trim())
                  : undefined,
              },
            })
          }
        })

        return flightData
      })

      // Transform XAEL data to our format
      return flights.map((flight: XaelFlightData) => ({
        date: date.toISOString(),
        seatsTotal: 10,
        seatsAvailable: flight.seatsAvailable,
        status:
          flight.seatsAvailable > 3
            ? 'AVAILABLE'
            : flight.seatsAvailable > 0
              ? 'LIMITED'
              : 'SOLD_OUT',
        schedule: {
          flightNumber: flight.flightNumber,
          departure: flight.departure,
          arrival: flight.arrival,
        },
        pricing: {
          regular: {
            base: flight.price.regular,
            tax: flight.price.regular * 0.0725,
            total: flight.price.regular * 1.0725,
          },
          ...(flight.price.firstClass && {
            firstClass: {
              base: flight.price.firstClass,
              tax: flight.price.firstClass * 0.0725,
              total: flight.price.firstClass * 1.0725,
            },
          }),
        },
      }))
    } catch (error) {
      console.error('Error fetching XAEL availability:', error)
      throw error
    }
  }

  async cleanup() {
    if (this.browser) {
      await this.browser.close()
      this.browser = null
      this.page = null
      this.isLoggedIn = false
    }
  }
}

================
File: lib/firebaseAdmin.ts
================
import * as admin from 'firebase-admin'

if (!admin.apps.length) {
  try {
    const privateKey = process.env.FIREBASE_ADMIN_PRIVATE_KEY?.replace(
      /\\n/g,
      '\n'
    )

    if (
      !privateKey ||
      !process.env.FIREBASE_ADMIN_PROJECT_ID ||
      !process.env.FIREBASE_ADMIN_CLIENT_EMAIL
    ) {
      throw new Error('Missing Firebase Admin configuration')
    }

    admin.initializeApp({
      credential: admin.credential.cert({
        projectId: process.env.FIREBASE_ADMIN_PROJECT_ID,
        clientEmail: process.env.FIREBASE_ADMIN_CLIENT_EMAIL,
        privateKey: privateKey,
      }),
    })
  } catch (error) {
    console.error('Firebase admin initialization error:', error)
  }
}

export const adminAuth = admin.auth()
export const adminDb = admin.firestore()

================
File: lib/firebaseConfig.ts
================
import { initializeApp, getApps } from 'firebase/app'
import { getAuth, setPersistence, browserLocalPersistence } from 'firebase/auth'
import { getFirestore } from 'firebase/firestore'

const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,
}

// Initialize Firebase only if it hasn't been initialized
const app = !getApps().length ? initializeApp(firebaseConfig) : getApps()[0]
const auth = getAuth(app)
const db = getFirestore(app)

// Set authentication persistence
setPersistence(auth, browserLocalPersistence).catch((error) => {
  console.error('Firebase persistence error:', error)
})

export { auth, db }

================
File: lib/firestore-setup.ts
================
import { db } from './firebaseConfig'
import { collection, addDoc, setDoc, doc } from 'firebase/firestore'

// Initial data for services
const initialServices = [
  { id: 'flights', title: 'Flights', content: '' },
  {
    id: 'shipping',
    title: 'Shipping',
    content: 'Send packages to Cuba easily.',
  },
  {
    id: 'rentals',
    title: 'Car Rentals',
    content: 'Book the best rental cars.',
  },
  {
    id: 'hotels',
    title: 'Hotels',
    content: 'Find affordable hotels in Cuba.',
  },
  {
    id: 'tours',
    title: 'Tours',
    content: 'Discover exciting tour packages.',
  },
]

// Initial data for charters
const initialCharters = [
  {
    id: 'xael',
    title: 'XAEL Charters',
    flights: [
      { route: 'Miami - Havana (Mon-Thu)', price: '$289' },
      { route: 'Miami - Havana (Fri-Sat)', price: '$319' },
      { route: 'Miami - Camagüey (Fri)', price: '$339' },
      { route: 'One Way (OW): Miami - Cuba', price: '$219' },
    ],
  },
  { id: 'cubazul', title: 'Cubazul', flights: [] },
  { id: 'invicta', title: 'Invicta', flights: [] },
  { id: 'havanaair', title: 'HavanaAir', flights: [] },
  { id: 'enjoy', title: 'Enjoy', flights: [] },
]

// Function to initialize Firestore collections
export async function initializeFirestore() {
  try {
    // Initialize services collection
    for (const service of initialServices) {
      await setDoc(doc(db, 'services', service.id), {
        title: service.title,
        content: service.content,
      })
    }

    // Initialize charters collection
    for (const charter of initialCharters) {
      await setDoc(doc(db, 'charters', charter.id), {
        title: charter.title,
        flights: charter.flights,
      })
    }

    console.log('Firestore collections initialized successfully')
  } catch (error) {
    console.error('Error initializing Firestore:', error)
  }
}

================
File: lib/firestore-utils.ts
================
import { db } from './firebaseConfig'
import {
  collection,
  doc,
  getDoc,
  getDocs,
  setDoc,
  updateDoc,
  deleteDoc,
  query,
  where,
} from 'firebase/firestore'

// Types
export interface Service {
  id: string
  title: string
  content: string
}

export interface Flight {
  route: string
  price: string
}

export interface Charter {
  id: string
  title: string
  flights: Flight[]
}

// Service operations
export const serviceOperations = {
  async getAll(): Promise<Service[]> {
    const servicesSnapshot = await getDocs(collection(db, 'services'))
    return servicesSnapshot.docs.map(
      (doc) =>
        ({
          id: doc.id,
          ...doc.data(),
        }) as Service
    )
  },

  async getById(id: string): Promise<Service | null> {
    const serviceDoc = await getDoc(doc(db, 'services', id))
    return serviceDoc.exists()
      ? ({ id: serviceDoc.id, ...serviceDoc.data() } as Service)
      : null
  },

  async update(id: string, data: Partial<Service>): Promise<void> {
    await updateDoc(doc(db, 'services', id), data)
  },

  async create(service: Omit<Service, 'id'>): Promise<string> {
    const docRef = doc(collection(db, 'services'))
    await setDoc(docRef, service)
    return docRef.id
  },
}

// Charter operations
export const charterOperations = {
  async getAll(): Promise<Charter[]> {
    const chartersSnapshot = await getDocs(collection(db, 'charters'))
    return chartersSnapshot.docs.map(
      (doc) =>
        ({
          id: doc.id,
          ...doc.data(),
        }) as Charter
    )
  },

  async getById(id: string): Promise<Charter | null> {
    const charterDoc = await getDoc(doc(db, 'charters', id))
    return charterDoc.exists()
      ? ({ id: charterDoc.id, ...charterDoc.data() } as Charter)
      : null
  },

  async update(id: string, data: Partial<Charter>): Promise<void> {
    await updateDoc(doc(db, 'charters', id), data)
  },

  async updateFlights(id: string, flights: Flight[]): Promise<void> {
    await updateDoc(doc(db, 'charters', id), { flights })
  },
}

================
File: lib/flight-service.ts
================
import { db } from '@/lib/firebaseConfig'
import { collection, getDocs, query, where } from 'firebase/firestore'
import type { Charter, SearchParams, FlightAvailability } from '@/types/flight'

class FlightService {
  private cache: Map<string, FlightAvailability> = new Map()

  async searchFlights(params: SearchParams) {
    try {
      // Get all charters
      const chartersRef = collection(db, 'charters')
      const chartersSnap = await getDocs(chartersRef)
      const charters = chartersSnap.docs.map((doc) => ({
        id: doc.id,
        ...doc.data(),
      })) as Charter[]

      // For each charter, get availability
      const results = await Promise.all(
        charters.map(async (charter) => {
          const availability = await this.getCharterAvailability(
            charter,
            params
          )
          return {
            charter,
            availability,
          }
        })
      )

      return results
    } catch (error) {
      console.error('Error searching flights:', error)
      throw error
    }
  }

  private async getCharterAvailability(
    charter: Charter,
    params: SearchParams
  ): Promise<FlightAvailability | null> {
    // This will be replaced with actual charter system integration
    const cacheKey = `${charter.id}-${params.destination}-${params.departureDate}`

    if (this.cache.has(cacheKey)) {
      return this.cache.get(cacheKey)!
    }

    // Generate random flight number
    const flightNumber = `${charter.id.toUpperCase()}${Math.floor(
      Math.random() * 1000
    )
      .toString()
      .padStart(3, '0')}`

    // Generate random price
    const basePrice = Math.floor(Math.random() * (400 - 250) + 250)
    const tax = basePrice * 0.0725
    const total = basePrice + tax

    // For now, return dummy data that matches FlightAvailability type
    const availability: FlightAvailability = {
      date: params.departureDate.toISOString(),
      seatsTotal: 10,
      seatsAvailable: Math.floor(Math.random() * 10),
      status: 'AVAILABLE' as const,
      schedule: {
        flightNumber,
        departure: '08:00',
        arrival: '09:30',
      },
      pricing: {
        regular: {
          base: basePrice,
          tax,
          total,
        },
        firstClass: {
          base: basePrice * 1.5,
          tax: basePrice * 1.5 * 0.0725,
          total: basePrice * 1.5 * 1.0725,
        },
      },
    }

    // Update status based on seats available
    if (availability.seatsAvailable === 0) {
      availability.status = 'SOLD_OUT'
    } else if (availability.seatsAvailable <= 3) {
      availability.status = 'LIMITED'
    }

    this.cache.set(cacheKey, availability)
    return availability
  }

  // Add method to clear cache
  clearCache() {
    this.cache.clear()
  }

  // Add method to get cached data
  getCachedData() {
    return Array.from(this.cache.entries()).map(([key, value]) => ({
      key,
      value,
    }))
  }
}

export const flightService = new FlightService()

================
File: lib/verifyToken.js
================
// lib/verifyToken.js

import { adminAuth } from './firebaseAdmin'

export async function verifyIdToken(token) {
  try {
    const decodedToken = await adminAuth.verifyIdToken(token)
    return decodedToken
  } catch (error) {
    console.error('Error verifying token:', error)
    return null
  }
}

================
File: public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: scripts/init-firestore.js
================
const { initializeApp } = require('firebase/app')
const { getFirestore, collection, doc, setDoc } = require('firebase/firestore')
require('dotenv').config({ path: '.env.local' })

// Firebase configuration
const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,
}

// Initialize Firebase
const app = initializeApp(firebaseConfig)
const db = getFirestore(app)

// Initial data
const initialServices = [
  {
    id: 'flights',
    data: {
      title: 'Flights',
      content: '',
      createdAt: new Date().toISOString(),
    },
  },
  {
    id: 'shipping',
    data: {
      title: 'Shipping',
      content: 'Send packages to Cuba easily.',
      createdAt: new Date().toISOString(),
    },
  },
  {
    id: 'rentals',
    data: {
      title: 'Car Rentals',
      content: 'Book the best rental cars.',
      createdAt: new Date().toISOString(),
    },
  },
  {
    id: 'hotels',
    data: {
      title: 'Hotels',
      content: 'Find affordable hotels in Cuba.',
      createdAt: new Date().toISOString(),
    },
  },
  {
    id: 'tours',
    data: {
      title: 'Tours',
      content: 'Discover exciting tour packages.',
      createdAt: new Date().toISOString(),
    },
  },
]

const initialCharters = [
  {
    id: 'xael',
    data: {
      title: 'XAEL Charters',
      flights: [
        { route: 'Miami - Havana (Mon-Thu)', price: '$289' },
        { route: 'Miami - Havana (Fri-Sat)', price: '$319' },
        { route: 'Miami - Camagüey (Fri)', price: '$339' },
        { route: 'One Way (OW): Miami - Cuba', price: '$219' },
      ],
      createdAt: new Date().toISOString(),
    },
  },
  {
    id: 'cubazul',
    data: {
      title: 'Cubazul',
      flights: [],
      createdAt: new Date().toISOString(),
    },
  },
  {
    id: 'invicta',
    data: {
      title: 'Invicta',
      flights: [],
      createdAt: new Date().toISOString(),
    },
  },
  {
    id: 'havanaair',
    data: {
      title: 'HavanaAir',
      flights: [],
      createdAt: new Date().toISOString(),
    },
  },
  {
    id: 'enjoy',
    data: {
      title: 'Enjoy',
      flights: [],
      createdAt: new Date().toISOString(),
    },
  },
]

async function initializeFirestore() {
  try {
    console.log('Starting Firestore initialization...')

    // Initialize services collection
    console.log('Initializing services...')
    for (const service of initialServices) {
      try {
        await setDoc(doc(db, 'services', service.id), service.data)
        console.log(`✓ Service ${service.id} initialized successfully`)
      } catch (error) {
        console.error(`Error initializing service ${service.id}:`, error)
      }
    }

    // Initialize charters collection
    console.log('\nInitializing charters...')
    for (const charter of initialCharters) {
      try {
        await setDoc(doc(db, 'charters', charter.id), charter.data)
        console.log(`✓ Charter ${charter.id} initialized successfully`)
      } catch (error) {
        console.error(`Error initializing charter ${charter.id}:`, error)
      }
    }

    console.log('\n✓ Firestore collections initialized successfully')
    process.exit(0)
  } catch (error) {
    console.error('Error initializing Firestore:', error)
    process.exit(1)
  }
}

// Verify environment variables
const requiredEnvVars = [
  'NEXT_PUBLIC_FIREBASE_API_KEY',
  'NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN',
  'NEXT_PUBLIC_FIREBASE_PROJECT_ID',
  'NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET',
  'NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID',
  'NEXT_PUBLIC_FIREBASE_APP_ID',
]

const missingEnvVars = requiredEnvVars.filter(
  (varName) => !process.env[varName]
)

if (missingEnvVars.length > 0) {
  console.error('Missing required environment variables:', missingEnvVars)
  process.exit(1)
}

// Run initialization
console.log('Firebase Config:', firebaseConfig)
initializeFirestore()

================
File: scripts/init-firestore.ts
================
import { initializeFirestore } from '../lib/firestore-setup'

async function runInitialization() {
  try {
    await initializeFirestore()
    process.exit(0)
  } catch (error) {
    console.error('Initialization failed:', error)
    process.exit(1)
  }
}

runInitialization()

================
File: types/admin.ts
================
// types/admin.ts
import type { Charter, Flight } from './flight'

export interface AdminCharter {
  id: string
  title: string
  flights: Flight[]
}

// Convert between admin and full charter types
export const toAdminCharter = (charter: Charter): AdminCharter => {
  return {
    id: charter.id,
    title: charter.title,
    flights: charter.flights || [],
  }
}

export const toFullCharter = (adminCharter: AdminCharter): Charter => {
  return {
    id: adminCharter.id,
    title: adminCharter.title,
    system: 'custom',
    flights: adminCharter.flights,
    // These are optional in the Charter interface, so we can omit them
    routes: [],
    pricing: {},
  }
}

================
File: types/dashboard.ts
================
export interface DashboardMetrics {
  bookings: number
  revenue: number
  visitors: number
}

export interface DashboardData {
  totalFlights: number
  activePromotions: number
  activeAnnouncements: number
  recentBookings: number
  metrics: {
    daily: DashboardMetrics
    weekly: DashboardMetrics
    monthly: DashboardMetrics
  }
}

export interface Announcement {
  id: string
  title: string
  content: string
  type: 'info' | 'warning' | 'alert'
  priority: 'high' | 'normal' | 'low'
  validFrom: Date
  validUntil: Date
  active: boolean
  order: number // Added this field
}

export interface Promotion {
  id: string
  title: string
  imageUrl: string
  description: string
  validFrom: Date
  validUntil: Date
  active: boolean
  order: number
  charter?: string
  type: 'standard' | 'featured' | 'banner'
}

export interface WidgetSettings {
  autoUpdate?: boolean
  refreshInterval?: number
  displayLimit?: number
  layout?: 'grid' | 'list' | 'carousel'
  sources?: Record<string, boolean>
  style?: string
  position?: string
  showIcon?: boolean
  dismissible?: boolean
  persistent?: boolean
}

export interface Widget {
  id: string
  type: 'priceChart' | 'promotionImage' | 'announcement' | 'info'
  title: string
  content: any
  settings?: WidgetSettings
  order: number
}

export interface FlightTab {
  id: string
  title: string
  description?: string
  order: number
  widgets: Widget[]
  active: boolean
}

interface SubTab {
  id: string
  title: string
  order: number
  widgets: Widget[]
}

interface TabSection {
  id: string
  title: string
  subTabs: SubTab[]
}

// Price chart specific types
interface ChartPrice {
  charter: string
  route: string
  price: number
  lastUpdated: Date
  source: 'manual' | 'automated'
}

interface PriceChartWidget extends Widget {
  type: 'priceChart'
  content: {
    prices: ChartPrice[]
    updateFrequency: number // in minutes
  }
}

interface PromotionWidget extends Widget {
  type: 'promotionImage'
  content: {
    imageUrl: string
    link?: string
    validUntil?: Date
  }
}

interface AdminCharter {
  id: string
  title: string
  flights: Flight[]
}

interface Flight {
  route: string
  price: string
}

================
File: types/flight.ts
================
export interface FlightRoute {
  from: {
    code: string
    city: string
  }
  to: {
    code: string
    city: string
  }
}

export interface Service {
  id: string
  title: string
  content: string
}

export interface FlightSchedule {
  flightNumber: string
  departure: string
  arrival: string
  daysOfOperation: string[]
}

export interface FlightPrice {
  regular: {
    base: number
    tax: number
    total: number
  }
  firstClass?: {
    base: number
    tax: number
    total: number
  }
}

export interface FlightAvailability {
  date: string
  seatsTotal: number
  seatsAvailable: number
  status: 'AVAILABLE' | 'LIMITED' | 'SOLD_OUT'
  schedule: {
    flightNumber: string
    departure: string
    arrival: string
  }
  pricing: {
    regular: {
      base: number
      tax: number
      total: number
    }
    firstClass?: {
      base: number
      tax: number
      total: number
    }
  }
}

export interface Charter {
  id: string
  title: string
  flights: Flight[]
  system?: string
  routes?: Array<{
    from: {
      code: string
      city: string
    }
    to: {
      code: string
      city: string
    }
  }>
  pricing?: Record<
    string,
    {
      regular: {
        base: number
        tax: number
        total: number
      }
      firstClass?: {
        base: number
        tax: number
        total: number
      }
    }
  >
}

export interface Flight {
  route: string
  price: string
}

export interface SearchParams {
  origin: string
  destination: string
  departureDate: Date
  returnDate?: Date
  passengers: number
  tripType: 'oneway' | 'roundtrip'
}

export interface FilterOptions {
  charter?: string
  maxPrice?: number
  departureTime?: 'morning' | 'afternoon' | 'evening'
  availabilityStatus?: 'AVAILABLE' | 'LIMITED' | 'SOLD_OUT'
}

export type SortOption = 'price' | 'departure' | 'availability' | 'charter'
export type SortDirection = 'asc' | 'desc'

================
File: .eslintrc.json
================
{
  "extends": ["next/core-web-vitals", "prettier"],
  "plugins": ["prettier"],
  "rules": {
    "prettier/prettier": "error"
  }
}

================
File: .firebaserc
================
{
  "projects": {
    "default": "caribefly-5148a"
  }
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# env files (can opt-in for commiting if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
caribefly-5148a-firebase-adminsdk-*.json

================
File: .prettierrc
================
{
  "semi": false,
  "singleQuote": true,
  "printWidth": 80,
  "tabWidth": 2,
  "trailingComma": "es5"
}

================
File: commands.txt
================
npx prettier --write .

================
File: firebase.json
================
{
  "functions": [
    {
      "source": "functions",
      "codebase": "default",
      "ignore": [
        "node_modules",
        ".git",
        "firebase-debug.log",
        "firebase-debug.*.log",
        "*.local"
      ],
      "predeploy": ["npm --prefix \"$RESOURCE_DIR\" run lint"]
    }
  ]
}

================
File: middleware.ts
================
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

// Define protected routes
const routes = {
  admin: ['/admin/dashboard'],
  client: ['/dashboard'],
  auth: ['/login', '/signup'],
  public: ['/'],
}

export async function middleware(request: NextRequest) {
  const token = request.cookies.get('firebaseToken')?.value
  const path = request.nextUrl.pathname

  // Check route type
  const isAdminRoute = routes.admin.some((route) => path.startsWith(route))
  const isClientRoute = routes.client.some((route) => path.startsWith(route))
  const isAuthRoute = routes.auth.some((route) => path.startsWith(route))

  // If no token and trying to access protected route
  if (!token && (isAdminRoute || isClientRoute)) {
    const loginPath = isAdminRoute ? '/admin/login' : '/login'
    return NextResponse.redirect(new URL(loginPath, request.url))
  }

  // If has token and trying to access auth routes
  if (token && isAuthRoute) {
    return NextResponse.redirect(new URL('/dashboard', request.url))
  }

  return NextResponse.next()
}

export const config = {
  matcher: ['/dashboard/:path*', '/admin/:path*', '/login', '/signup'],
}

================
File: next.config.ts
================
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  /* config options here */
}

export default nextConfig

================
File: package.json
================
{
  "name": "caribefly",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "init-db": "ts-node scripts/init-firestore.js",
    "lint": "next lint"
  },
  "dependencies": {
    "@firebase/firestore": "^4.7.4",
    "axios": "^1.7.7",
    "date-fns": "^4.1.0",
    "firebase": "^11.0.1",
    "firebase-admin": "^12.7.0",
    "next": "15.0.2",
    "nookies": "^2.5.2",
    "puppeteer": "^23.7.0",
    "react": "19.0.0-rc-02c0e824-20241028",
    "react-dom": "19.0.0-rc-02c0e824-20241028",
    "react-icons": "^5.3.0",
    "recharts": "^2.13.3"
  },
  "devDependencies": {
    "@types/node": "^20.17.6",
    "@types/puppeteer": "^5.4.7",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "@typescript-eslint/eslint-plugin": "^8.12.2",
    "@typescript-eslint/parser": "^8.12.2",
    "autoprefixer": "^10.4.20",
    "dotenv": "^16.4.5",
    "eslint": "^8.57.1",
    "eslint-config-next": "15.0.2",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-import": "^2.31.0",
    "eslint-plugin-prettier": "^5.2.1",
    "postcss": "^8.4.47",
    "prettier": "^3.3.3",
    "tailwindcss": "^3.4.14",
    "ts-node": "^10.9.2",
    "typescript": "^5.6.3"
  }
}

================
File: postcss.config.js
================
// postcss.config.js
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
}

export default config

================
File: README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

================
File: setCustomClaims.js
================
//setCustomClaims.js
const admin = require('firebase-admin')
const serviceAccount = require('./caribefly-5148a-firebase-adminsdk-75ry4-1c1090f554.json') // Update the path

// Initialize the Firebase Admin SDK
admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
})

async function setAdminRole(uid) {
  try {
    // Set the 'admin' custom claim for the user with the given UID
    await admin.auth().setCustomUserClaims(uid, { admin: true })
    console.log(`Successfully set admin claim for user with UID: ${uid}`)
  } catch (error) {
    console.error('Error setting custom claims:', error)
  }
}

// Run the function with the UID of the user you want to set as an admin
// Replace 'USER_UID' with the actual Firebase UID of the user
setAdminRole('soEdBAe29nP1y0a4Sf1yBeMLn573')

================
File: tailwind.config.js
================
// tailwind.config.js
module.exports = {
  content: [
    './app/**/*.{js,ts,jsx,tsx}', // Ensure app directory is included
    './components/**/*.{js,ts,jsx,tsx}',
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}

================
File: tailwind.config.ts
================
import type { Config } from 'tailwindcss'

const config: Config = {
  content: [
    './pages/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}',
    './app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      colors: {
        background: 'var(--background)',
        foreground: 'var(--foreground)',
      },
    },
  },
  plugins: [],
}
export default config

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noImplicitAny": true,
    "strictNullChecks": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
